<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="543ca117-4863-45ff-b17b-e50f13d2cf39" activeEnvironment="Default" name="ForwardSoapUI" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="D:\zBasket"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="5326f225-6143-4652-a923-b202ff3b0c89" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://10.10.10.152" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#forw.test.host}</con:endpoint></con:endpoints><con:resource name="" path="/api/v1/auth/token" id="0903fe1c-6b40-4aa3-97a0-bd7a807b3380"><con:settings/><con:parameters><con:parameter><con:name>email</con:name><con:value>CORP-LIGHT-WEB</con:value><con:style>QUERY</con:style><con:default>CORP-LIGHT-WEB</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_id</con:name><con:value>FORWARD_ONLINE_WEB</con:value><con:style>QUERY</con:style><con:default>FORWARD_ONLINE_WEB</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AuthLogin" id="c2908004-f081-4d01-bd2c-9c74d0c9c500" method="POST"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value>kutsdm</con:value><con:style>QUERY</con:style><con:default>kutsdm</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>password</con:name><con:value>qwerty</con:value><con:style>QUERY</con:style><con:default>qwerty</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>mode</con:name><con:value>username</con:value><con:style>QUERY</con:style><con:default>username</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>grant_type</con:name><con:value>password</con:value><con:style>QUERY</con:style><con:default>password</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:xht="http://www.w3.org/1999/xhtml">xht:html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 404 422 401 423 412</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>504</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="getToken" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>
</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="password" value="${#Project#userPass}"/>
  <con:entry key="username" value="${#Project#userName}"/>
</con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>mode</con:entry><con:entry>email</con:entry><con:entry>client_id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/api/v1/payments/process" path="/api/v1/payments/process" id="0903fe1c-6b40-4aa3-97a0-bd7a807b3380"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payments" id="c2908004-f081-4d01-bd2c-9c74d0c9c500" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">true</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:xht="http://www.w3.org/1999/xhtml">xht:html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 500 422 404 400</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ProcessSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="ConfirmationCode" path="/api/ConfirmationCode/${#Project#userId}" id="be03db23-97f3-474b-9234-d2fa5b363bb8"><con:settings/><con:parameters/><con:method name="Method 1" id="2ec690a4-97b1-4813-837a-369b90bd5947" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:con1="http://10.10.17.156/api/ConfirmationCode/">con1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/payments/create" id="7982a67b-496b-48ea-bcee-5dd2557e17ec"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Cache-Control</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payments" id="8b4705c4-bf50-4689-a9c9-43fa60aaa89d" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500 400</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/payments/create">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/payments/create">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="paymentCreateSelf" id="d8c65492-3fff-4c34-a544-19cdf93d162e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>{
    "Sender": {
        "AccountNumber": "26204015141116",
        "AccountMFO": 380418,
        "AccountType": "CURRENT"
    },
    "Recipient": {
        "AccountNumber": "26208018247068",
        "AccountMFO": 380418,
        "AccountType": "CURRENT",
        "UserINN": "",
        "FullName": ""
    },
    "Purpose": "Переказ грошових коштів",
    "ConfirmationCode": "${#Project#otp}",
    "Amount": 4400,
    "CurrencyCode": "UAH",
    "PaymentType": "SELF",
    "SaveAsTemplate": false,
    "TemplateId": null,
    "Fee": 11
}</con:request><con:originalUri>http://10.10.17.156/api/v1/payments/create</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="process" path="/api/v1/payments/accountToCard/process" id="efe690c8-bffd-4352-ab39-63bb04acfd3c"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Cache-Control</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payment_OuterCard" id="d14c7291-df37-493d-9cdb-8ee12887ebeb" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 422 404 400 500</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/process">proc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="payment_accountToCard/process" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>{
  "Amount": 1100,
  "CurrencyCode": "UAH",
  "PaymentType": "OUTER_CARD",
  "Fee": 9980,
  "Sender": {
    "AccountNumber": "26203800207653",
    "AccountMFO": "380418",
    "AccountType": "CARD",
    "CardId": 5
  },
  "Recipient": {
    "CardNumber": "4999999999990011"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/payments/accountToCard/create" id="0f5db92e-d7d8-42f4-944f-b57bcba3bfdd"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Cache-Control</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payment_OuterCard" id="890fb9d3-1348-46da-ada7-39d6e47cf829" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500 400 401 422</con:status><con:params/><con:element xmlns:cre="http://10.10.17.160/api/v1/payments/accountToCard/create">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.160/api/v1/payments/accountToCard/create">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="payment_accountToCard/create" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>{
  "Amount": 1100,
  "CurrencyCode": "UAH",
  "PaymentType": "OUTER_CARD",
  "Fee": 9980,
  "Sender": {
    "AccountNumber": "26203800207653",
    "AccountMFO": "380418",
    "AccountType": "CARD",
    "CardId": 5
  },
  "Recipient": {
    "CardNumber": "4999999999990011"
  },
  "ConfirmationCode": "${#Project#otp}",
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/payments/cardToAccount/create" id="c2884c60-1bd3-4520-8eff-3735fabd2fd8"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Cache-Control</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payment_IncomingCard" id="5766887f-5b88-4a40-9683-e1c1d7a24300" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.160/api/v1/payments/cardToAccount/create">cre:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404 400 500 422</con:status><con:params/><con:element xmlns:cre="http://10.10.17.160/api/v1/payments/cardToAccount/create">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="payment_cardToAccount/create" id="9f8f271e-d056-40e9-8fcb-169237f05237" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>{
  "Amount": 8000,
  "CurrencyCode": "",
  "PaymentType": "INCOMING_CARD",
  "Recipient": {
    "CardId": 6
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}${#Project#forw.port.front}/public/transfer-complete",
    "ErrorUrl": "${#Project#forw.test.host}${#Project#forw.port.front}/public/transfer-error"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/cardToAccount/create</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="process" path="/api/v1/payments/accountToCard/external/process" id="82086f2a-9cfc-43f6-8971-dedef29c5925"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payment_OuterCard" id="34fefd22-c298-4a02-9d99-105a4f5b1af7" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 422 404 400</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/external/process">proc:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/process">proc:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="payments/accountToCard/external/process" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>{
  "Amount": "${#TestCase#Amount}",
  "CurrencyCode":  "${#TestCase#CurrencyCode}",
  "PaymentType": "OUTER_CARD",
  "Fee": "${#TestCase#Fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#SenderAccountNumber}",
    "AccountMFO": "${#TestCase#SenderAccountMFO}",
    "AccountType": "${#TestCase#SenderAccountType}",
    "CardId":  "${#TestCase#SenderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#RecipientCardNumber}",
    "ExternalCardId": "${#TestCase#RecipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/payments/accountToCard/external/create" id="82086f2a-9cfc-43f6-8971-dedef29c5925"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payment_OuterCard" id="34fefd22-c298-4a02-9d99-105a4f5b1af7" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 422 404 400</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/external/process">proc:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/external/process">proc:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="payments/accountToCard/external/create" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}${#Project#dbConnection}</con:endpoint><con:request>{
  "Amount": "${#TestCase#Amount}",
  "CurrencyCode":  "${#TestCase#CurrencyCode}",
  "PaymentType": "OUTER_CARD",
  "Fee": "${#TestCase#Fee}",
   "ConfirmationCode": "${#Project#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#SenderAccountNumber}",
    "AccountMFO": "${#TestCase#SenderAccountMFO}",
    "AccountType": "${#TestCase#SenderAccountType}",
    "CardId":  "${#TestCase#SenderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#RecipientCardNumber}",
    "ExternalCardId": "${#TestCase#RecipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="processC2AToken" path="/api/v1/payments/cardToAccount/external/process" id="82086f2a-9cfc-43f6-8971-dedef29c5925"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="INCOMING_CARD" id="34fefd22-c298-4a02-9d99-105a4f5b1af7" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 422 404 400</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/external/process">proc:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/process">proc:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="payments/accountToCard/external/process" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId": 41
  },
  "Recipient": {
    "CardId": 10
  },
  "Amount": 2300,
  "CurrencyCode": "",
  "PaymentType": "INCOMING_CARD",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="createC2AToken" path="/api/v1/payments/cardToAccount/external/create" id="82086f2a-9cfc-43f6-8971-dedef29c5925"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Payment_OuterCard" id="34fefd22-c298-4a02-9d99-105a4f5b1af7" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 422 404 400 403</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/external/process">proc:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proc="http://10.10.17.160/api/v1/payments/accountToCard/external/process">proc:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="payments/accountToCard/external/create" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId": 41
  },
  "Recipient": {
    "CardId": 10
  },
  "Amount": 2300,
  "CurrencyCode": "",
  "PaymentType": "INCOMING_CARD",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  },
  "ConfirmationCode": "871893"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="process" path="/api/v1/payments/phone/process" id="297ce026-aaee-47c8-886e-6a7877d19f17"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="/api/v1/payments/phone/process" id="94203c0d-7e8d-4b83-9fbc-1d9b48e15c26" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:tok="http://10.10.17.13/auth/logon/token">tok:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="/phone/process" id="06908942-28e9-4c7a-8b06-781a7bca098c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/payments/phone/create" id="8232bacd-5bc0-41f4-8981-169e01584f29"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="/api/v1/payments/phone/create" id="e7b1bf4b-e67e-4144-95ae-e84ea25a8e1e" method="POST"><con:settings/><con:parameters/><con:request name="/phone/create" id="d0427c93-e2a3-4e5d-ad89-3731a1090bff" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="api/v1/deposits/243/replenishment/process" path="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" id="4e34e042-0f39-426b-a9da-3752629ab8b2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6a80fe7c-72cb-471e-9f7c-96e722a8eb29" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401 400 422</con:status><con:params/><con:element xmlns:proc="http://10.10.17.156/api/v1/deposits/243/replenishment/process">proc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentTypeDeposit}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO380418}",
    "AccountType": "${#TestSuite#senderAccountTypeCURRENT}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="api/v1/deposits/20786469/replenishment/create" path="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" id="4e34e042-0f39-426b-a9da-3752629ab8b2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6a80fe7c-72cb-471e-9f7c-96e722a8eb29" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401 400</con:status><con:params/><con:element xmlns:proc="http://10.10.17.156/api/v1/deposits/243/replenishment/process">proc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/deposits/20786469/replenishment/create">cre:Response</con:element></con:representation><con:request name="Request 1" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentTypeDeposit}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO380418}",
    "AccountType": "${#TestSuite#senderAccountTypeCURRENT}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="api/v1/deposits/request/process" path="/api/v1/deposits/request/process" id="4e34e042-0f39-426b-a9da-3752629ab8b2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6a80fe7c-72cb-471e-9f7c-96e722a8eb29" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401 400 422 403</con:status><con:params/><con:element xmlns:proc="http://10.10.17.156/api/v1/deposits/243/replenishment/process">proc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestCase#depositProductId}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="api/v1/deposits/request/create" path="/api/v1/deposits/request/create" id="4e34e042-0f39-426b-a9da-3752629ab8b2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6a80fe7c-72cb-471e-9f7c-96e722a8eb29" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401 400 422 403</con:status><con:params/><con:element xmlns:proc="http://10.10.17.156/api/v1/deposits/243/replenishment/process">proc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/deposits/request/create">cre:Response</con:element></con:representation><con:request name="Request 1" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#confirmationCode}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestCase#depositProductId}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="services/phone-recharge/process" path="/api/v1/services/phone-recharge/process" id="270054ff-4dad-4f42-92ba-fab103f87cf2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="3d770d0f-ca32-478d-a5f4-b573d4770ff3" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 403 500</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/services/phone-recharge/create">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestCase#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}",
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestCase#serviceId}",
    "SubServiceId": "${#TestCase#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="services/phone-recharge/create" path="/api/v1/services/phone-recharge/create" id="270054ff-4dad-4f42-92ba-fab103f87cf2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="3d770d0f-ca32-478d-a5f4-b573d4770ff3" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 403 500 422</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/services/phone-recharge/create">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.160/api/v1/services/phone-recharge/create">cre:Response</con:element></con:representation><con:request name="Request 1" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestCase#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}",
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestCase#serviceId}",
    "SubServiceId": "${#TestCase#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="familnyi/api/v1/payments/sync" path="/familnyi/api/v1/payments/sync" id="4a0b2f2b-2cbf-457a-ad89-76a05d1cfd77"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="8393b89e-7631-45b3-8269-ffc485251859" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="43efdd44-6124-4477-8570-92148b8c928a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#familniyHost}</con:endpoint><con:request/><con:originalUri>http://10.10.17.158/familnyi/api/v1/payments/sync</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="api/v1/payments/sync/pending" path="/api/v1/payments/sync/pending" id="270054ff-4dad-4f42-92ba-fab103f87cf2"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="3d770d0f-ca32-478d-a5f4-b573d4770ff3" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 403 500 422</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/services/phone-recharge/create">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://10.10.17.160/api/v1/services/phone-recharge/create">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/v1/payments/sync/pending</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="process" path="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" id="94fa0181-362b-4326-a0d9-a1c367e8c3c0"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="a8cd4b17-9042-4b61-b44b-3104ca082c29" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="255f6213-7ea0-435b-b783-580291a6227c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentTypeDeposit}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO380418}",
    "AccountType": "${#TestSuite#senderAccountTypeCURRENT}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/create" id="277b034b-e530-4f91-a80e-2b7bf0539798"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="ce6748f5-fec3-4f58-afa0-0735a4757d88" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:cre="http://10.10.17.156/api/v1/deposits/20786469/replenishment/create">cre:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="87aa8bdc-7da6-4cf4-b373-17479a61603e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentTypeDeposit}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO380418}",
    "AccountType": "${#TestSuite#senderAccountTypeCURRENT}"
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="process" path="/api/v1/payments/cardToAccount/process" id="3ab6985a-ca4c-4be9-92d7-23fd56b417f0"><con:settings/><con:parameters><con:parameter><con:name>Accept</con:name><con:value>application/json</con:value><con:style>QUERY</con:style><con:default>application/json</con:default></con:parameter><con:parameter><con:name>Accept-Encoding</con:name><con:value>gzip</con:value><con:style>QUERY</con:style><con:default>gzip</con:default></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value>uk-UA</con:value><con:style>QUERY</con:style><con:default>uk-UA</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>${#Project#token}</con:value><con:style>QUERY</con:style><con:default>${#Project#token}</con:default></con:parameter><con:parameter><con:name>Content-Type</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" id="963cb42f-43f7-48e3-b1a7-4f5b0af03c3a" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="1ba5ae1e-6f20-4e9c-801f-26ab216db205" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{Amount: 500, CurrencyCode: "UAH", PaymentType: "SELF", Purpose: "Переказ грошових коштів", Fee: 5,…}
Amount: 500
CurrencyCode: "UAH"
Fee: 5
PaymentType: "SELF"
Purpose: "Переказ грошових коштів"
Recipient: {AccountNumber: "UA483804180000026208018247068", AccountMFO: 380418, AccountType: "CURRENT"}
AccountMFO: 380418
AccountNumber: "UA483804180000026208018247068"
AccountType: "CURRENT"
Sender: {AccountNumber: "UA773804180000026209900033839", AccountMFO: "380418", AccountType: "CARD"}
AccountMFO: "380418"
AccountNumber: "UA773804180000026209900033839"
AccountType: "CARD"</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Accept-Encoding" value="gzip"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
</con:parameters><con:parameterOrder><con:entry>Accept</con:entry><con:entry>Accept-Encoding</con:entry><con:entry>Accept-Language</con:entry><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="process" path="/api/v1/loans/550/repayment/process" id="ffb35ccd-796b-4668-8ef4-a62d44c50378"><con:settings/><con:parameters><con:parameter><con:name>Accept</con:name><con:value>application/json</con:value><con:style>QUERY</con:style><con:default>application/json</con:default></con:parameter><con:parameter><con:name>Accept-Encoding</con:name><con:value>gzip</con:value><con:style>QUERY</con:style><con:default>gzip</con:default></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value>uk-UA</con:value><con:style>QUERY</con:style><con:default>uk-UA</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value>application/json</con:value><con:style>QUERY</con:style><con:default>application/json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="34c55a93-7185-4936-a87c-d28569c2e4a8" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="b198255f-9999-4f25-bedb-cd27cba1287b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{Amount: 500, CurrencyCode: "UAH", PaymentType: "INNER_LOAN", Fee: 5,…}
Amount: 500
CurrencyCode: "UAH"
Fee: 5
PaymentType: "INNER_LOAN"
Sender: {AccountNumber: "UA483804180000026208018247068", AccountMFO: 380418, AccountType: "CURRENT"}
AccountMFO: 380418
AccountNumber: "UA483804180000026208018247068"
AccountType: "CURRENT"</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Accept-Encoding" value="gzip"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Accept</con:entry><con:entry>Accept-Encoding</con:entry><con:entry>Accept-Language</con:entry><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="create" path="/api/v1/loans/550/repayment/create" id="63b64b3a-346e-4969-adce-576d6c8b06d4"><con:settings/><con:parameters><con:parameter><con:name>Accept</con:name><con:value>application/json</con:value><con:style>QUERY</con:style><con:default>application/json</con:default></con:parameter><con:parameter><con:name>Accept-Encoding</con:name><con:value>gzip</con:value><con:style>QUERY</con:style><con:default>gzip</con:default></con:parameter><con:parameter><con:name>Accept-Language</con:name><con:value>uk-UA</con:value><con:style>QUERY</con:style><con:default>uk-UA</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>Content-Type</con:name><con:value>application/json</con:value><con:style>QUERY</con:style><con:default>application/json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="e81307e8-2374-4ce7-a7e7-dbac844ff060" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="3a8f73ad-109e-43da-899b-2155e23a9721" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{Amount: 500, CurrencyCode: "UAH", PaymentType: "INNER_LOAN", Fee: 5, ConfirmationCode: "740969",…}
Amount: 500
ConfirmationCode: "740969"
CurrencyCode: "UAH"
Fee: 5
PaymentType: "INNER_LOAN"
Sender: {AccountNumber: "UA483804180000026208018247068", AccountMFO: 380418, AccountType: "CURRENT"}
AccountMFO: 380418
AccountNumber: "UA483804180000026208018247068"
AccountType: "CURRENT"</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Accept-Encoding" value="gzip"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Accept</con:entry><con:entry>Accept-Encoding</con:entry><con:entry>Accept-Language</con:entry><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="withdrawal" path="/api/v1/cashback/cards/contract/%E2%84%96700/withdrawal" id="7766ec39-9242-47f0-a2b1-f8be4c7aac9d"><con:settings/><con:parameters/><con:method name="Method 1" id="15564427-ee1e-4ac6-b5f1-95294e85deff" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="a5d95fef-1559-47bc-85e0-dbf7db1df803" mediaType="application/json"><con:settings/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="activate" path="/api/v1/cashback/categories/activate" id="a411e4f1-05b4-4f35-aee7-3a2cd6c229e0"><con:settings/><con:parameters/><con:method name="Method 1" id="14cae2c0-4213-47d4-b6ee-e9c5778c4f78" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="d39c2c55-128a-48e8-97cd-c3ebbb612881" mediaType="application/json"><con:settings/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="fe0f7019-a2a8-46ea-a17f-6d27eae87a5d" name="PreparationEnvironment"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5f5985bc-7f3e-4b83-8289-4d8d757d7b36" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Main" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="14c1fb98-1c56-4a53-8722-82d4312c2c37"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def   properties = new Properties()
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath
def envForward = context.testCase.testSuite.testCases["Forward"]
def envGlobus = context.testCase.testSuite.testCases["Globus"]

File mainPropertiesFile = new File( projectPath + '/MainData.properties')
   mainPropertiesFile.withInputStream {
   properties.load(it)
}

def mainJson = new JsonSlurper().parseText(mainPropertiesFile.text)

   if ( mainJson.bank == 'globus'){
   envForward.setDisabled(true)
   envGlobus.setDisabled(false)
   	}  else  if ( mainJson.environment == 'forward'){
   		envGlobus.setDisabled(true)
   		envForward.setDisabled(false)
   			} else{
   	   			log.info("Environment not defined. Environment = " + mainJson.environment )
   }

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="39d702f9-a761-4aa0-8113-41d1924b04d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Forward" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="26e40ae6-d5b2-4908-a58c-7d5741c204e9"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def   properties = new Properties()
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath
def PaymentsFrameP2PCardToAccount = context.testCase.testSuite.project.testSuites["PaymentsFrameP2PCardToAccount"]
def RechargePhone_ValidateTrueCreateRepeateSuccess = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateRepeateSuccess"]
def RechargePhone_ValidateTrueCreateRepeateError = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateRepeateError"]
def RechargePhone_ValidateTrueCreateStatusSuccess = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateStatusSuccess"]
def RechargePhone_ValidateTrueCreateStatusError = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateStatusError"]

File mainPropertiesFile = new File( projectPath + '/MainData.properties')
   mainPropertiesFile.withInputStream {
   properties.load(it)
}

File masterPropertiesFile = new File( projectPath + '/DataMasterEnvironment.properties')
	masterPropertiesFile.withInputStream {
      properties.load(it)
}

File testPpropertiesFile = new File( projectPath + '/DataTestEnvironment.properties')
	testPpropertiesFile.withInputStream {
     properties.load(it)
}

def mainJson = new JsonSlurper().parseText(mainPropertiesFile.text)
def masterJson = new JsonSlurper().parseText(masterPropertiesFile.text)
def testJson = new JsonSlurper().parseText(testPpropertiesFile.text)
 if ( mainJson.bank == 'globus'){
 	testRunner.gotoTestCaseByName("compareErrorPaymentA2CDB")
 	}
   if ( mainJson.environment == 'master'){
   context.getTestCase().getTestSuite().getProject().setPropertyValue('forw.test.host', masterJson.hostClient)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnection',  masterJson.dbConnection)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('url_conf_code',  masterJson.url_conf_code)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnectionFamilniy',  masterJson.dbConnectionFamilniy)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('familniyHost',  masterJson.familniyHost)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnectionPortmone',  masterJson.dbConnectionPortmone)
   PaymentsFrameP2PCardToAccount.setDisabled(true)
   RechargePhone_ValidateTrueCreateRepeateSuccess.setDisabled(true)
   RechargePhone_ValidateTrueCreateRepeateError.setDisabled(true)
   RechargePhone_ValidateTrueCreateStatusSuccess.setDisabled(true)
   RechargePhone_ValidateTrueCreateStatusError.setDisabled(true)
   
   }  else  if ( mainJson.environment == 'test'){
   context.getTestCase().getTestSuite().getProject().setPropertyValue('forw.test.host', testJson.hostClient)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnection',  testJson.dbConnection)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('url_conf_code',  testJson.url_conf_code)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnectionFamilniy',  testJson.dbConnectionFamilniy)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('familniyHost',  testJson.familniyHost)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnectionPortmone',  testJson.dbConnectionPortmone)
   PaymentsFrameP2PCardToAccount.setDisabled(false)
   } else{
   	   log.info("Environment not defined. Environment = " + mainJson.environment )
   }

</script></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteOrderedCard" id="afb8b6dc-d549-483b-bfc8-93f892df1d90"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_1'
</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 


///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromOrderedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromOrderedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromOrderedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromOrderedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromOrderedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromOrderedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromOrderedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromOrderedCard', 'senderAccountNumber', orderedCardsAccNum)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteNotActiveCard" id="8ec46bcb-fa98-4238-b945-0f4b32a4fcbc"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_2'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromNotActiveCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromNotActiveCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromNotActiveCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromNotActiveCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromNotActiveCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromNotActiveCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromNotActiveCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromNotActiveCard', 'senderAccountNumber', orderedCardsAccNum)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteExpiredCard" id="56e1b242-e4d5-4953-be6d-ae03a69ee72a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_5'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromExpiredCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromExpiredCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromExpiredCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromExpiredCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromExpiredCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromExpiredCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromExpiredCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromExpiredCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByPhone", 'PayByPhoneFromExpiredCard', 'senderAccountNumber', orderedCardsAccNum)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteClosedCard" id="24d5edd8-b57b-40f7-95a1-d0d8479e5166"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_6'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromClosedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromClosedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromClosedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromClosedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromClosedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromClosedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromClosedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByPhone", 'PayByPhoneFromClosedCard', 'senderAccountNumber', orderedCardsAccNum)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteUndefinedCard" id="eb4d7a82-68bf-4e7e-a57b-f5c617f4ec7d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_7'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromUndefinedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromUndefinedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromUndefinedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromUndefinedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromUndefinedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromUndefinedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromUndefinedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromUndefinedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByPhone", 'PayByPhoneFromUndefinedCard', 'senderAccountNumber', orderedCardsAccNum)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePaymentsUpdate" id="b0132e2f-b0ef-44a0-93de-bedeab472011"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update PAYMENTS
SET state='BANKERROR' ,
 document_state='5'
where user_id = '${#Project#userId}' and state in ('PENDING', 'BANKSENT' )
</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteDepositType" id="2a4265a6-c2b7-4c5e-a09f-a3ddf76b935b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from deposit_type_all where rownum=1 and term = 515  and amount = 2000 and rate = 16 and currencyid = 980 and canreplenish = 1 and autoprolong = 1
</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

depProductID = responseXmlHolder.getNodeValue("//*:SQNC").toString() 
depID = responseXmlHolder.getNodeValue("//*:ID").toString() 
depTerm = responseXmlHolder.getNodeValue("//*:TERM").toString() 
depCurrentRate = responseXmlHolder.getNodeValue("//*:RATE").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].setPropertyValue(nameProperty, param)
}

public void saveToTestCaseParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "OpenDepositOwnAcc",  'depositTypeSqnc', depProductID)
saveToSuiteParam ( "OpenDepositOwnAcc",  'term', depTerm)
saveToSuiteParam ( "OpenDepositOwnAcc",  'currentRate', depCurrentRate)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToTestCaseDepositUSDType" id="40987f5b-2635-420f-9412-8bd8b3118c5a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from deposit_type_all where rownum=1 and term = 90  and amount = 5000 and rate = 2 and currencyid = 840 and canreplenish = 1 and autoprolong = 1

</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

depProductID = responseXmlHolder.getNodeValue("//*:SQNC").toString() 
depID = responseXmlHolder.getNodeValue("//*:ID").toString() 
depTerm = responseXmlHolder.getNodeValue("//*:TERM").toString() 
depCurrentRate = responseXmlHolder.getNodeValue("//*:RATE").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].setPropertyValue(nameProperty, param)
}

public void saveToTestCaseParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToTestCaseParam ( "OpenDepositOwnAcc", "OpenDepositOwnAccInterestCurrencyNotMatchDeposit",  'depositProductId', depProductID)
saveToTestCaseParam ( "OpenDepositOwnAcc", "OpenDepositOwnAccFinalCurrencyNotMatchDeposit",  'depositProductId', depProductID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a5027d8c-f96e-4717-ad5e-33ff4b218b9d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Globus" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="206454e9-cdbb-4c6b-8e96-0872f4c2830f"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def   properties = new Properties()
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath
def PaymentsFrameP2PCardToAccount = context.testCase.testSuite.project.testSuites["PaymentsFrameP2PCardToAccount"]
def RechargePhone_ValidateTrueCreateRepeateSuccess = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateRepeateSuccess"]
def RechargePhone_ValidateTrueCreateRepeateError = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateRepeateError"]
def RechargePhone_ValidateTrueCreateStatusSuccess = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateStatusSuccess"]
def RechargePhone_ValidateTrueCreateStatusError = context.testCase.testSuite.project.testSuites["RechargePhone"].testCases["ValidateTrueCreateStatusError"]

File mainPropertiesFile = new File( projectPath + '/MainData.properties')
   mainPropertiesFile.withInputStream {
   properties.load(it)
}

File masterPropertiesFile = new File( projectPath + '/DataMasterEnvironment.properties')
	masterPropertiesFile.withInputStream {
      properties.load(it)
}

File testPpropertiesFile = new File( projectPath + '/DataTestEnvironment.properties')
	testPpropertiesFile.withInputStream {
     properties.load(it)
}

def mainJson = new JsonSlurper().parseText(mainPropertiesFile.text)
def masterJson = new JsonSlurper().parseText(masterPropertiesFile.text)
def testJson = new JsonSlurper().parseText(testPpropertiesFile.text)

   if ( mainJson.environment == 'master'){
   context.getTestCase().getTestSuite().getProject().setPropertyValue('forw.test.host', masterJson.hostClient)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnection',  masterJson.dbConnection)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('url_conf_code',  masterJson.url_conf_code)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnectionFamilniy',  masterJson.dbConnectionFamilniy)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('familniyHost',  masterJson.familniyHost)
   PaymentsFrameP2PCardToAccount.setDisabled(true)
   RechargePhone_ValidateTrueCreateRepeateSuccess.setDisabled(true)
   RechargePhone_ValidateTrueCreateRepeateError.setDisabled(true)
   RechargePhone_ValidateTrueCreateStatusSuccess.setDisabled(true)
   RechargePhone_ValidateTrueCreateStatusError.setDisabled(true)
   
   }  else  if ( mainJson.environment == 'test'){
   context.getTestCase().getTestSuite().getProject().setPropertyValue('forw.test.host', testJson.hostClient)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnection',  testJson.dbConnection)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('url_conf_code',  testJson.url_conf_code)
      context.getTestCase().getTestSuite().getProject().setPropertyValue('dbConnectionFamilniy',  testJson.dbConnectionFamilniy)
   context.getTestCase().getTestSuite().getProject().setPropertyValue('familniyHost',  testJson.familniyHost)
   PaymentsFrameP2PCardToAccount.setDisabled(false)
   } else{
   	   log.info("Environment not defined. Environment = " + mainJson.environment )
   }

</script></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteOrderedCard" id="29a346de-c04d-4c76-bbb5-ff147b4d6a78"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_1'
</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 


///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromOrderedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromOrderedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromOrderedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromOrderedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromOrderedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromOrderedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromOrderedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromOrderedCard', 'senderAccountNumber', orderedCardsAccNum)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteNotActiveCard" id="6fe82cea-29ce-4cbc-8115-3067385bccd2"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_2'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromNotActiveCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromNotActiveCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromNotActiveCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromNotActiveCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromNotActiveCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromNotActiveCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromNotActiveCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromNotActiveCard', 'senderAccountNumber', orderedCardsAccNum)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteExpiredCard" id="c49b4131-ddad-4db4-914e-6f396f702ad7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_5'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromExpiredCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromExpiredCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromExpiredCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromExpiredCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromExpiredCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromExpiredCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromExpiredCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromExpiredCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByPhone", 'PayByPhoneFromExpiredCard', 'senderAccountNumber', orderedCardsAccNum)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteClosedCard" id="33eb5bb3-38d2-40f8-8918-bd39265270bd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_6'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromClosedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromClosedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromClosedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromClosedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromClosedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromClosedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromClosedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByPhone", 'PayByPhoneFromClosedCard', 'senderAccountNumber', orderedCardsAccNum)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteUndefinedCard" id="d41e9a63-1a9c-414c-b745-2e1a225e43e5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionIC}</con:connectionString><con:query>select t.*, t.rowid  from FWD_CARDACCLIST t where t.contractnum =  '777_7'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

orderedCardNum = responseXmlHolder.getNodeValue("//*:CARDNUM").toString() 
orderedCardID = responseXmlHolder.getNodeValue("//*:CARDID").toString() 
orderedCardsAccNum = responseXmlHolder.getNodeValue("//*:ACCNUM").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromUndefinedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsFrameP2PAccountToCard", 'PayFrameP2PA2CFromUndefinedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromUndefinedCard', 'senderAccountNumber', orderedCardNum)
saveToSuiteParam ( "PaymentsTokenР2РAccountToCard", 'PayTokenP2PA2CFromUndefinedCard', 'senderCardId', orderedCardID)

saveToSuiteParam ( "PaymentsFrameP2PCardToAccount", 'PayFrameP2PC2AFromUndefinedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsTokenР2РCardToAccount", 'PayTokenP2PC2AFromUndefinedCard', 'recipientCardID', orderedCardID)

saveToSuiteParam ( "PaymentsSelfCardToAccount", 'PaySelfC2AFromUndefinedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByRequisites", 'PayByRequisitFromUndefinedCard', 'senderAccountNumber', orderedCardsAccNum)

saveToSuiteParam ( "PaymentsByPhone", 'PayByPhoneFromUndefinedCard', 'senderAccountNumber', orderedCardsAccNum)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePaymentsUpdate" id="a443b6a9-ac1d-41f0-ad1c-86e544bbd21f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update PAYMENTS
SET state='BANKERROR',
 document_state='5'
where user_id = '${#Project#userId}' and state in ('PENDING', 'BANKSENT' )
</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToSuiteDepositType" id="02c941af-6ab0-4bd5-ab44-039284a39d4a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from deposit_type_all where rownum=1 and term = 515  and amount = 2000 and rate = 16 and currencyid = 980 and canreplenish = 1 and autoprolong = 1
</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

depProductID = responseXmlHolder.getNodeValue("//*:SQNC").toString() 
depID = responseXmlHolder.getNodeValue("//*:ID").toString() 
depTerm = responseXmlHolder.getNodeValue("//*:TERM").toString() 
depCurrentRate = responseXmlHolder.getNodeValue("//*:RATE").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].setPropertyValue(nameProperty, param)
}

public void saveToTestCaseParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToSuiteParam ( "OpenDepositOwnAcc",  'depositTypeSqnc', depProductID)
saveToSuiteParam ( "OpenDepositOwnAcc",  'term', depTerm)
saveToSuiteParam ( "OpenDepositOwnAcc",  'currentRate', depCurrentRate)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="saveToTestCaseDepositUSDType" id="48a19dcb-ab7e-458e-adc4-08bce790797c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from deposit_type_all where rownum=1 and term = 90  and amount = 5000 and rate = 2 and currencyid = 840 and canreplenish = 1 and autoprolong = 1

</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

depProductID = responseXmlHolder.getNodeValue("//*:SQNC").toString() 
depID = responseXmlHolder.getNodeValue("//*:ID").toString() 
depTerm = responseXmlHolder.getNodeValue("//*:TERM").toString() 
depCurrentRate = responseXmlHolder.getNodeValue("//*:RATE").toString() 

///////////////  Compare parameters null or known value
public void saveToSuiteParam (String suiteName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].setPropertyValue(nameProperty, param)
}

public void saveToTestCaseParam (String suiteName, String caseName,  String nameProperty, Object param){
context.getTestCase().getTestSuite().project.testSuites[suiteName].testCases[caseName].setPropertyValue(nameProperty, param)
}

saveToTestCaseParam ( "OpenDepositOwnAcc", "OpenDepositOwnAccInterestCurrencyNotMatchDeposit",  'depositProductId', depProductID)
saveToTestCaseParam ( "OpenDepositOwnAcc", "OpenDepositOwnAccFinalCurrencyNotMatchDeposit",  'depositProductId', depProductID)

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="a19ba3d0-d940-49b5-acf2-db2d7cb70e3c" name="Authentication"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e4844fa5-6554-4afd-a39b-8f0a2401b61c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Valid_getToken" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getToken" id="41854655-5f5f-4527-8297-33b10e3686b1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/auth/token" methodName="AuthLogin" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getToken" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>
</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="64c8fbdc-905b-4f07-9851-0b589263ba32" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('token', 'bearer ' + parser.access_token)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('userId', parser.user_id)

  </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1de83181-7c81-4b51-a43f-9e569fdd3e31" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7cbb270-816c-4958-b271-dba145fd8876" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mode" value="userName"/>
  <con:entry key="password" value="${#Project#userPass}"/>
  <con:entry key="username" value="${#Project#userName}"/>
</con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>username</con:entry><con:entry>password</con:entry><con:entry>mode</con:entry><con:entry>email</con:entry><con:entry>client_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="HTTP Request" id="5a56e96e-205f-4d65-87d7-a262c7c79c74"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="5dd6d2e2-bede-4c85-b21d-c3f29fe40629" name="HTTP Request" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Aythorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "ErrorUrl": "string",
  "CompleteUrl": "string"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="ac713a3c-48ab-4b9c-9557-8303db24d8e9" name="PaymentsSelfAccountToAccount"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ab39ba8f-8f78-4141-b4fb-04376363a67e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2AMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="b8602d2e-698c-43a7-9ff2-e1c55ea2569a"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="e8689ea1-f99d-44ed-9300-84a805960f42"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="b4193321-06f4-4fae-8725-eb1d0f8ab07f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="203ad6c6-86a0-4fea-bebd-19f5baed5505"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="392b11cc-9d15-4b41-9961-63b93d87ea34"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="dc193986-d4c0-4c7b-9ef6-fb8e80e8a92a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="bd299271-6d6d-4303-bd63-7dda24633fff"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="cd643754-4f6f-48af-a024-05e4a4c35e92" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>495</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207996</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>198325</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="f9fe1d31-0965-4cdc-bbcb-e9ef36976f5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2AMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="74c00a8f-29b1-4b35-8474-ca82b031f567" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="5f95ad95-0407-460a-8665-86eaa518dbd2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="2a0d8928-28eb-40e6-95ea-70fac01a18a5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="fb72f9e7-ca75-4f52-b696-837fc129366f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="16b31fe0-72df-4f25-91a9-b25f454c0c5f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="42bfee8f-6170-4aa4-9069-d01cfa944b16"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207892</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>330105</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="19f520b2-7fb2-4da8-aef9-9480b1be8f2d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2ANoFee" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="4774c253-6bb3-473d-94e6-aa830cf0e7ab" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="d0836dba-a23b-40b4-91c1-2b5d0a552a07"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="f899f85a-4aa0-4a26-a6dd-3a32c6c6e887"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="1f80272e-0bb4-4238-b608-52c07ab40247"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="9f352884-4999-4608-9b3a-d368bd457106"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="008df222-0aea-4e85-b3ad-13ab3fbb1a5e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "senderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207893</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>072754</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="5d2a04ca-f13b-4714-abe8-3deaf808afce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2ANotOwnAccSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="7833bf7d-c9c7-4a65-9d00-b19682127fb2" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="e359bc2f-9b51-484b-85ed-82f43ef00b7d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8114b0a7-81f9-4475-9ef8-bdb86c7286d2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account UA033804180000026201105997905 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1239</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>208070</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="33ae2e44-5116-4e16-9670-d7810cc41d7c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2ANotOwnAccRecipient" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="ae0125f5-fd40-4c56-b9ac-ae2e0bde328b" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="77671174-d25d-4476-926b-379e4d741447"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="96b50932-a373-4f02-850c-9faea5705c59" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message

  assert message == context.getTestCase().getPropertyValue( "message" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1013</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>501300</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26204015141116</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>message</con:name><con:value>Account 26204015141116 not found for this user.</con:value></con:property></con:properties></con:testCase><con:testCase id="120b4380-72bf-421e-afea-77aa9f6970b5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2ASumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="da60fdab-80ee-4d10-aad2-994f9ad30991" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="24761399-e564-4eb2-81e3-a8daeae02050"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4959a447-5c3c-4fd9-aa7c-37ef16aeec92" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1239</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>208070</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="aac182da-9864-4248-ac23-e35783110fa2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2AFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d900c1c2-204a-49f9-9a58-b088eab23825" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="f7618c76-a322-40ba-a977-20e85f36525b"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd9398cc-78d3-4f95-a59a-aeb860ec1ec8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message

  assert message == context.getTestCase().getPropertyValue( "message" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1490</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>027752</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>message</con:name><con:value>Account UA043804180000026301000089078 not found for this user.</con:value></con:property></con:properties></con:testCase><con:testCase id="ab68c927-7869-4f7f-9333-7d33bafea6a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2AToBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="e64961a1-eeae-4aa9-bd78-377bb494fe1c" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="0e2f02a1-d2e7-4cd1-ac42-ee08b622cbc6"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd9398cc-78d3-4f95-a59a-aeb860ec1ec8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message

  assert message == context.getTestCase().getPropertyValue( "message" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA223804180000026301000089078</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>otp</con:name><con:value>027752</con:value></con:property><con:property><con:name>message</con:name><con:value>Recipient's account number must not start with: UA22.</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1490</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="16703b6c-9d37-4d89-b1c9-05c35140faf8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2AWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d283875f-76a3-4d22-a79e-65b6e0a17a11" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="eaabcc1d-2be8-4e8f-9731-8fe2b84d6ae5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="f514092d-af36-4923-ba13-2e512bff0d70"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="6d9c2778-97c0-4ff6-b4c8-d94224d44e15"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>otp</con:name><con:value>{CODE=465861}</con:value></con:property></con:properties></con:testSuite><con:testSuite id="bee7da21-469e-41ea-906b-4c47118a59bc" name="PaymentsSelfCardToСard"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2e83c658-8b32-4ed1-97e1-5f4659e7f628" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="e6392b48-5e91-4799-9ceb-765258a58b40"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="8f8ff128-1618-4a6d-b2ea-e4820e1b5163"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="de509b64-62ec-4028-93b5-052d8b944c55" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="bd21c1fa-ac3a-49e7-92b3-9025e48b0c15"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="88e32383-8a74-44f6-ba5c-7fef232e29c5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="2ca80ab3-d3ab-4009-afaa-46da65584280"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="613a0251-8064-4b91-820f-9c62114da2f8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19801</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207702</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>151593</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="2bb0c822-1c1e-45cf-ac6e-f4f9f0d85826" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="bf32e714-f086-442e-bde6-7d964f73ca37" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="0b596b75-b810-46b1-8956-a8cb796e02ce"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="6f44eee1-fd16-4c33-9735-e22d90590c31"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="27acb34f-2142-4977-9f1f-e4e2b56b0d74"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="5db1aea0-0b7c-4c6d-8375-2cdc3f918798"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="7fbfda06-45f2-4cef-9a28-219c408ad2d0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207703</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>174605</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="ebad3242-e257-47fb-8a96-51964a610e62" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CNoFee" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="b59a11ba-74f5-4d39-a76a-024357b4084d" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="0513ce3c-bebd-43d7-9bb1-91c8c888b8f8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="6ab97bd4-ec21-4f6b-9633-49abcd4e7102"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="6825686f-9cbb-4406-9029-0e1a309ab766"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="bf910b14-f1f6-4912-9f64-b9e1d11cd232"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="809623b3-aebc-43a3-8783-e61d777e1c1f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1111</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207704</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>098347</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property></con:properties></con:testCase><con:testCase id="6ee9c651-8c74-4a64-8a53-2596198465f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CCardNotContainAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="449dc3d3-e3ba-49eb-9ca4-17d373d443e4" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="71bdb6b8-5ea2-47c4-8d3a-967f47b140c5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account UA923804180000026208800079371 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA923804180000026208800079371</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="52023a9e-1e02-4ba9-b5d1-8ba2afd6b3d2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CNotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="0014ee63-e99c-482f-b48c-ecd2796c94b8" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="b9f3f886-04c6-4377-b56e-8722231d4a79"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account 26209900044828 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="7cbd4521-9c4b-482f-8c86-87741a0c1c39" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="0376dcc9-f223-4d80-b9b4-eee8a58043bf" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="c8fd38c6-aa0b-45cf-837a-5aaa7e11031c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19803</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="9491310e-e726-472e-b72f-1da2461ba0b2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CNotOwnBankCardRecipient" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="cbf92316-331d-40af-93b7-db9f333aa173" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="fd75c210-0572-4860-9472-5fa5caca4679"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "The account number - UA033004650000026209900044811 does not match the entered mfo - 380418."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033004650000026209900044811</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="f3572495-aea1-4f5d-a774-d918b414d0a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CFromBlockCard" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="2a4540cc-50ba-42f3-ac42-1b2fa76ca84c" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="1cfc6070-4c93-41e7-bbbf-69103b5d9db8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA393804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="3e0fdbb5-ebda-48f7-9b9e-91299d36d28d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2CWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="4e113005-6bd2-4c38-b292-e2150f2a78e9" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="a371e08e-1f64-4bf7-a20a-a1b0db9c1470"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="0c9c9c7f-8f0a-45ec-a6b9-9b672ad6eeb0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="3a4a1f96-08d3-407d-800d-6d1ada81795c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="c47c1399-02bb-4b4c-861d-fb3b2a8d1433" name="PaymentsSelfCardToAccount"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2855a3ea-5ad6-47b8-90a6-0f085cd29a87" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="0214db70-2181-4903-8b40-b3540f175dcf"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="62072e1e-1ad0-4105-a29f-7cab2745e681"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="2c0c5a3d-31ab-4eef-a4c7-8336da00371b" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="f5550461-0df5-496c-8944-e2e7914fddd1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="003e7e7f-7a0f-47ff-8998-015a74db80ae"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="ab4e43ac-ac35-400d-91ab-fc4e36e63986"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="822b3815-b74f-4f34-99c1-0bd63301823b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207705</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>635983</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="170defb9-2dc1-467d-b6e6-4ce34ac2a071" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d9c64b72-e2ee-4d21-9260-82809480972e" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="fe5b1451-87d6-4ea2-adf7-f3664b4ab834"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="3505a4f7-1bf6-4714-a927-cb6f6e2aadf2"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="6051e03b-7f60-4a9f-ad26-4a4b3e268247"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="e57caef8-52f2-4d95-a1e4-35e52d94cc9a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="b5d7986e-e00a-45b1-9030-9612536cdf7c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207706</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>646929</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="76b171ac-3559-4f2a-bb04-38dc9fa6efcf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2ACardNotContainAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="10da7516-6864-4050-81f7-a88b5b74ca6a" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="5bddc032-f8a0-42de-a4e1-b2e4f0ee4068"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account UA923804180000026208800079371 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA923804180000026208800079371</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="ffc9bc32-2b02-4d02-ac5b-03c59f08448b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2ASumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="fe146baf-d052-4319-a2e7-867543fd27b5" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="b7bc4952-176a-4bf0-8cfa-d42314ecd236"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19803</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="8987a4e8-0d15-4d41-ae43-99cedec327e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AFromBlockCard" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="1609365f-f47b-4862-a104-aa8869a3f3d2" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="22a3c3b7-7e65-420a-8146-99d3083813bb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA393804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="4f5f57c0-10f0-481c-9f01-b7ebf720e659" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AToBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="98e7c6a0-8906-40e5-9fb5-5e683644cba3" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="57d49188-ee69-44f1-b7a8-0447b82764bc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA393804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="2e81e7c5-19aa-42be-8d07-6caf9bc0c0af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2ANotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="cf593cfe-56a7-4a9b-b254-4e8cc34c8fea" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="0377bede-cae6-4906-a2ba-dddb95efea68"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account 26209900044828 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="331bf554-c00b-4d7c-8b27-94711ee60251" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="f0b2ff79-493e-4cb5-abb6-11a87a66223f" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="184a58a1-67ae-4dff-a54b-df240a7c20e1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="e7856a55-d73e-4dbc-b056-1ae6771500a7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="55ea29f5-ac31-4f6d-b1bf-accd483a24d4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="ed00796d-aeb0-4a7b-b943-be182c92316a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="8ac0ae34-9bae-45c6-bc4e-a60c7f788760"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26202800046558</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property></con:properties></con:testCase><con:testCase id="33af6aa4-acc3-4786-99d5-ea00a868cc18" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="a97e3515-b8a2-4584-9050-a6cfe70a2af3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900063768</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property></con:properties></con:testCase><con:testCase id="b3c9e571-9846-42e1-b370-5183b8ee599f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="f27e75d8-1b97-4997-a1c5-af530f7aa71d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209800235845</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property></con:properties></con:testCase><con:testCase id="d909c3ff-0352-4dd0-a8e4-3029d4bf9f66" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="70e13b62-fcbf-43fd-b6d5-740d04ad57eb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26200800187420</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property></con:properties></con:testCase><con:testCase id="8bd503f3-6745-4222-9b09-a6a95b2baa0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfC2AFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="944366d1-2ba7-4e5e-9206-2bab6ff131f3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26203800006122</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="0bbf3109-3bf2-4dc2-875c-c9d67ec629bb" name="PaymentsSelfAccountToCard"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0b59accc-e73b-47a5-9db8-3c93be35c66d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2CMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="d8cccbad-0f3e-4abd-b08d-9d27b0cfa738"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="fa229522-462f-45ea-9cd8-c4868d855400"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="595549c9-d9ff-4f47-ac1d-fa3c2367ae13" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="b2e0ee97-a29b-4a40-a4b3-72a21353be75"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="32d11ea6-31be-48ba-85e5-3d55bfe5ae60"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="582203fd-1d43-4912-8cf8-061981c749ba"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="5920e3e6-2df1-4449-8772-0c521729b6b1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207707</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>114834</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="64401efa-5bb1-47d4-8a12-be908f9e8fae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2CMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="099dd6be-e86a-4174-adf2-2b7a2b66d43d" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="32ed3765-f5c7-4492-a0ff-bb7b6856c09b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="d07808ce-e282-4442-b7e6-d77002b0407d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="2ba510b7-5fae-4a2b-b146-6988a1cf78b6"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="71c36dc9-91f4-4f31-8ec9-6cb5fff09f1c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="13d57453-6582-467a-ac08-95953bd2f285"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207708</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>627431</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="bc8de7fe-2d13-421d-a24e-dd8bf8308270" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Pay_CardNotContainAccSelf_A2C" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="c33844ec-1537-422d-a21b-1c9718ea70db" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="20d41f0c-d27b-4db6-bbed-e8503fb527ef"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Information is being updated.Try again later."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA923804180000026208800079371</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="1aed8c90-d9b8-45c8-a483-c26f3f4effb4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2CSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="aafe0b6a-1a09-4a41-b879-11930af5c256" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="4739e7f5-f25b-43b3-8774-d5a72febcd82"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="c3bb1a9c-5b29-495c-ab74-703b9267d227" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2CFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="301451be-b459-45c4-999b-04cc73db6213" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="5ec8f481-4c12-45a8-bd44-7a0ead7a76bd"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account UA043804180000026301000089078 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="93517b3e-a2e7-4a98-951a-408d1428fe26" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2CNotOwnAccSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="dd15cc11-b906-449b-a37a-4ef88131cc71" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="2b52ab7b-2dfd-4ec4-b54d-5466fd9496bc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="91d7439a-e54a-4741-b31b-86344de62963" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account UA033804180000026201105997905 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>388500</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="b402608a-5f42-4ad6-be6a-365d4f9bd9a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PaySelfA2CWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="98ce2cf6-6e2b-46ef-b0ce-24414d35f6f1" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="11aa1af1-0fd7-433e-ac4e-8d29d6799f6a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="379227ca-0c99-4ee1-8874-7b3da88fdf22"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="3ea22a16-326b-4830-837b-2e616f8cfc86"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2861</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SELF</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="71ae8ada-ec4d-4c79-9ec5-81998e54dbb0" name="PaymentsCustomerBank"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="de4f2538-515b-4035-8971-32e6753cd76f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayCustBankA2AMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="b6baa2d1-4ed9-4442-9bca-9448e9971487"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="delayForConfCode" id="ac382555-7100-4233-a264-6995c86e0679"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="2e37c6f7-7e0c-4ab1-b84f-9919a4d8271b" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="5ad6dc70-a21f-4298-9d71-79c287a120cf"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="6907f709-5c1e-4cd5-bb39-f210ea5ecff2"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="b30afffc-30cc-44d6-ac64-c0804ae0e938"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="27a03649-ce5a-40ac-86ce-fda1c09834c7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207709</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>903373</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="48e225c2-28bd-4ac0-a361-137892bb37e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayCustBankA2CToAccCards" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="599f2989-61df-465d-8b59-6674e8adbf77" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="a1dcc7d6-ce10-4dba-a950-33303e607285"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="1457ade1-6e0e-401f-9434-c581ef60fb10"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="3f3ea8ad-6d49-4668-b46d-b6dc7623edbd"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="4a269eeb-ad45-4231-a26d-4a74233a73c4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="e6b97edf-4ee9-4628-9dc9-bd2d3c06fb2d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207710</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>395197</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA603804180000026209900061111</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="269e19cd-9fd1-4934-8305-bf433c541459" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayCustBankNotOwnAccRecipient" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="dd2cfd95-25f3-4f5d-96ac-2cdc16b9d2f3" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="3a32d565-a92c-47ea-aaab-f0903acb5a36"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="96b50932-a373-4f02-850c-9faea5705c59" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message

  assert message == context.getTestCase().getPropertyValue( "message" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1013</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>501300</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26208018247068</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>message</con:name><con:value>The account number - UA943004650000000026002301921 does not match the entered mfo - 380418.</con:value></con:property></con:properties></con:testCase><con:testCase id="05490770-cfb0-40cd-8cf1-fcfcf2631b76" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayCustBankCardToAccCard" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="2e8dcaa8-514c-4b6b-baa1-dcdf6c386d8b" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="079c6b4a-554b-4254-8818-57bc1c9da5f3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="8e955fd5-74d7-4286-a5ac-fcc89e65e215"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="5a6e886f-43a7-452a-80d4-7b7fba75b972"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="2702047c-dbfe-4f71-8bfb-3db71588d0c9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "accountTypeA")
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "fee")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accountTypeA</con:name><con:value>CARD</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207711</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>318860</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA603804180000026209900061111</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="0cb9bd1a-b3ba-4fc4-ab82-daed520f8197" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayCustBankToBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="f8279318-722b-4804-baa2-4b79511fea72" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processSelfPayments" id="4e71c769-21c9-4689-b279-83fccbcff34a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="73ce959c-ece7-4f44-a8aa-db32ef9449ce"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createSelfPayments" id="6df4fd06-e9d2-42dc-a9bd-6a9f4f4b12cd"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createSelfPayments" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}"
  }
}


</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePaymentSelfDB" id="c623943a-d070-4745-904d-79253f3772b0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207712</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>029945</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA883804180000026203800207653</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="2743c1e1-dedf-4347-b82a-ff9370b01503" name="PaymentsByRequisites"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="69a64ae0-dad6-4520-8e7e-514e704d10a2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitA2AMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="67189603-7db2-4557-b3f6-67296f0cb297"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8dd0211b-0b06-41ae-ab3c-837e8b3c3d95"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="d35beaeb-b1c5-4a11-af7a-f990f9995469" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="75767927-9ab6-45d9-ad86-50abedcfc71f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="d4323d07-9510-429e-bf72-e94491c944a0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByRequisit" id="fb3c60f6-bae5-4699-a480-bd10df478d9a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByRequisitDB" id="24532724-b441-4668-a405-ccbfd9ebfa4d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207713</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>737727</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="7898e724-a562-4f58-b483-8061f29b8826" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitA2АMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="77f222e7-c387-4ea2-9608-6254727f4f5d" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="9ea8a5df-45fe-42e2-b133-eda926fdd179"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="e626e223-53a3-4465-8a51-e2714c286599"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="cfa98238-27fb-495a-83ff-83bacf080da9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByRequisit" id="c0b4215d-4001-4ed6-a660-982b45a1e412"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByRequisitDB" id="422ddad0-eb6e-44bb-836c-900ef580e276"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207714</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>334228</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="9c96c05b-d72a-41d1-9763-8c8098502fcf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitС2АMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="0be4b605-8385-43e7-b54e-79d314f6778c" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="DelayConfCode" id="b5182f50-c204-4f5d-bac3-7c7710c7d2b6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="045a85d5-fd3b-45fd-ba6b-aab4911938e3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="588d1a7c-fba8-47a3-ab94-42a42cf06d2c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByRequisit" id="f245f81b-b7e9-4db9-a3f3-7b3343014b06"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByRequisitDB" id="f3b6cb29-de5e-48d9-bf93-996db59aadb4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207715</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>522965</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="c6dafd4f-8889-4e69-a9ff-757161ffcc1d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitC2COtherAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="1d8521e8-2f3e-4046-8cc0-41be94dfbaf4" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="04e6ea5f-11aa-4696-81e1-a18b846f7586"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="f9bfe5b1-4247-4466-bfda-102e357e2942"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="a03a333e-0514-416a-ad78-c15908672179"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByRequisit" id="8de7af05-d282-4bb7-8afa-2e77160cda98"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207716</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>360542</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="7680531b-cf65-42a4-b68c-5370b736d77c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitMFONotOwnAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="b8f693bc-3d48-45ae-b346-7336a11500e1" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="34e51549-2200-470d-a805-052ccfd16833"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "The account number - "+context.testCase.getPropertyValue('recipientAccountNumber')+" does not match the entered mfo - "+context.testCase.getPropertyValue('recipientAccountMFO')+"."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="7eeafd8a-0103-49c6-b212-8585b92e0acc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullPurpose" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="0a8285fd-11f7-4357-bdfc-b74abfec0869" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="ccde5953-4aa8-4882-b8aa-d294dc8b6e4d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Payment purpose required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value/></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="2490c6a9-85c2-4c70-8bbc-7c3e4f9d2a0a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullFromAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="9ee20f1f-bca0-44c3-adc4-03c45d05fa34" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="50ba7304-64a0-4e51-bdb8-2181f809324d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Sender's account number is required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>dfgsdfsf</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value/></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="c3ba0ada-49a2-4f57-8eb5-6722091494d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullToAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="8875793d-549f-43a1-8c47-b9fc5fc4a678" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="b58accea-6a4e-4c2f-9104-1f9881bd848e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Recipient's account number is required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>sdsgfdsg</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value/></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="ae79a0c9-7c8a-40f5-9142-71e391eaccdb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullRecipient" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="707251bd-bd02-4a73-8e08-8bc4fc22c21b" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="30d7d1f0-cd4a-405c-b600-06bcc2379820"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Recipient's name is required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>fdgdfgdfgd</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value/></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="ee146f2f-e5ed-4e2c-ab3b-98371b81b6f0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullRecipientIdCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d1921a83-93af-47d2-89a4-96c788309394" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="b6295e7d-8392-4bce-874f-6f4f7ed9e403"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Recipient's ITN required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>sdfsdfs</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value/></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="ea6d0251-2e38-425b-8957-a6a209762f9f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitC2AAmountMoreAvailable" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="99c4e87d-aa3f-4d04-84b7-3f02949912c3" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="b333e485-53ab-4612-af98-f83144067728"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1f2eb60f-c786-4642-aa65-57f5cc86aa04" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19803</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3321</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>508751</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="d5f6b87e-9e0e-4341-ba21-9138f6c3654b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="9154bb95-3ab6-45c1-a16f-ad278eeeb7d1" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="7fd220d6-e1f3-4ef7-a646-45951ddec99d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Error converting value \"\" to type 'System.Int64'. Path 'Amount', line 2, position 14. Transfer sum is required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value/></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>gdgdfgd</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="677db02e-bbf7-41e9-b185-08fd16a9c106" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNullFee" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="79dabe8e-157e-45fb-b942-0d95ee448fcc" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="e1bd0da4-70bd-4b9a-ad5e-cfd9a4cd05e7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="91a15a01-8352-4352-bd21-af1d505f468e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByRequisit" id="8033630c-c2f0-4e07-b784-e8c3e52f2917"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
   "ConfirmationCode": "${#TestCase#otp}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByRequisitDB" id="0eec159f-ae70-475e-94c9-1af53caaeb2c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207717</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>266811</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="ebd1ab3a-2036-497b-9a2b-ee691c3ddba9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d9ad41a5-6b12-4ef0-82be-8331d75dd4b1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="31bfa45f-e09f-4d99-9331-36031b3c406a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Account 26209900044828 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>йййцуцйуйу цу цйу йцу</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="934883e0-cf80-4073-b820-3a3de77229dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitNotOwnAccSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="61071c00-2a5d-4174-952b-42ee29b13c62" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="8280fe82-0fe9-4b96-90c6-235537da8ff7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7dac5ca-8b12-452c-98e2-5e8f434a3f9d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Account UA033804180000026201105997905 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3193</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>546421</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>йййцуцйуйу цу цйу йцу</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>300465</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA943004650000000026002301921</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="05b3e0f2-ee7d-40f9-b615-f6b996bcf379" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitA2CAmountMoreAvailable" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="4a2878ae-ffe8-49e8-a58e-1f7f96db5879" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="3b918c86-2a74-4f30-b09f-c5d8bd1c85ed"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0df07afa-6f7a-471b-abec-4eae001fa309" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3194</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>749171</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="b2bf2aad-8d42-4510-afc2-fd00c8f5c3f7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitStringAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="4406e60a-fd09-4657-86c3-a8df01101bde" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="1f8bed7a-f415-4db1-bc97-2927c8bd1acb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44cc58d7-bbc8-4e87-b8eb-cccb42e066c1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Error converting value \"abcdef\" to type 'System.Int64'. Path 'Amount', line 2, position 20. Transfer sum is required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>abcdef</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3194</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>749171</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="6500188e-92a8-4db5-870f-5b904cf01522" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitPurposeMoreAvailable" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="c3d64c9d-8a57-4930-ab8d-1ef587fd4aa6" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="0b32e252-d132-4420-beca-604f17e0ddcb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44cc58d7-bbc8-4e87-b8eb-cccb42e066c1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Payment purpose length is 160 characters."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>11</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3194</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>749171</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>ййййййййййй ццццццццццццццццццццццццццццццццццццццццццццццццццццццццццц ууууууууууууууууууууууййййййййййй цццццццццццццццццццццццццццццццццццццццццццццццццццццц2</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="4e609273-e7c7-44d8-9973-754e9880a998" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="359fa031-842d-4dd4-b2b0-78416866e361" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="6f914771-04d4-4f17-b1ec-6d2cc1a12f4e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44cc58d7-bbc8-4e87-b8eb-cccb42e066c1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Account UA043804180000026301000089078 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>11</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3194</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>749171</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>ццццццццц2</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="4c0c042e-4e23-4c10-819a-11ab13e84142" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitToBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="a5b0b9fa-a5db-456f-8b04-031f0a128e90" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="3f07d067-d63e-43a0-8d76-941a1f2b58d7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44cc58d7-bbc8-4e87-b8eb-cccb42e066c1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "The account number - UA043804180000026301000089078 does not match the entered mfo - 380418."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>11</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3194</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>749171</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>ццццццццц2</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="8b47f7af-8636-4599-85d7-47891242e7da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitSaveAsTemplate" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="fe51a794-7a32-44fa-8459-35c2a80b4b8e" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="counter +1" id="a723f070-c58b-48d6-8496-d59c8ad6da3c"><con:settings/><con:config><script>context.testCase.setPropertyValue( 'counter', (context.testCase.getPropertyValue( 'counter' ).toInteger()+1).toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="366f43fd-c201-4fa9-a4db-0b302f1f9d25"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "SaveAsTemplate": ${#TestCase#saveAsTemplate},
  "TemplateName": "${#TestCase#templateName}${#TestCase#counter}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="761ae9da-0682-4f46-b70d-9a3e5be590e5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByRequisit" id="3028026f-f931-4180-9c7c-2b68b6332adc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/create" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "ConfirmationCode": "${#TestCase#otp}",
  "SaveAsTemplate": ${#TestCase#saveAsTemplate},
  "TemplateName": "${#TestCase#templateName}${#TestCase#counter}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByRequisitDB" id="cd44aa24-2afe-44eb-be80-ea8e535b89e6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="compareTemplateByRequisitDB" id="b34a3927-1f5b-47db-9ae6-dd60b2aa772e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENT_TEMPLATES t where t.template_name =  '${#TestCase#templateName}'||'${#TestCase#counter}'</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

id = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
createDate = responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString()  
lastActiveDate = responseXmlHolder.getNodeValue("//*:LAST_ACTIVE_DATE").toString()  
templateName  = responseXmlHolder.getNodeValue("//*:TEMPLATE_NAME").toString()

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (id, "idTemplate")
compare (userId, "userId")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (paymentPurpose, "purpose")
compare (paymentType, "paymentType")
compare (createDate, "createDateTemplate") 
compare (lastActiveDate, "lastActiveDateTemplate")
assert templateName == context.testCase.getPropertyValue( 'templateName' )+ context.testCase.getPropertyValue( 'counter' )

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207718</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>810973</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>saveAsTemplate</con:name><con:value>true</con:value></con:property><con:property><con:name>templateName</con:name><con:value>Имя шаблона Автотест, counter:</con:value></con:property><con:property><con:name>counter</con:name><con:value>106</con:value></con:property><con:property><con:name>createDateTemplate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>lastActiveDateTemplate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>idTemplate</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="a7a192b6-7ade-42a2-a7d2-69b186501369" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitTemplateNameMoreAvailable" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="1bff1d51-7ad1-4749-9fc8-7848d77ca6f0" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="0f10a1c7-9718-48b5-aada-3648168db3f8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "SaveAsTemplate": ${#TestCase#saveAsTemplate},
  "TemplateName": "${#TestCase#templateName}${#TestCase#counter}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="80ee213d-961d-41d2-baa5-03d24a11fa4c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == " Назва шаблону некоректна. Максимальний розмір 200 символів."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3338</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>500521</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>saveAsTemplate</con:name><con:value>true</con:value></con:property><con:property><con:name>templateName</con:name><con:value>ййййййййййй ццццццццццццццццццццццццццццццццццццццццццццццццццццццццццц ууууууууууууууууууууууййййййййййй цццццццццццццццццццццццццццццццццццццццццццццццццццццц2ййййййййййй цццццццццццццццццццццццццццц</con:value></con:property><con:property><con:name>counter</con:name><con:value>13</con:value></con:property><con:property><con:name>createDateTemplate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>lastActiveDateTemplate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>idTemplate</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="d0276f1f-d44a-4f2d-b9e0-03ad273153f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitAmountMoreAvailableSaveAsTemplate" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="9df6fbef-a715-4bd5-b81f-38dd8d288fb2" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByRequisit" id="e12f416e-6d0b-4991-9f47-0d43c2c69d0b"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByRequisit" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "SaveAsTemplate": ${#TestCase#saveAsTemplate},
  "TemplateName": "${#TestCase#templateName}${#TestCase#counter}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a2b6ed03-e077-4b8b-99da-25c9813178e4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3332</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>905987</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Автотест Назначение платежа</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Автотест ФИО получателя</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>saveAsTemplate</con:name><con:value>true</con:value></con:property><con:property><con:name>templateName</con:name><con:value>Имя шаблона Автотест, counter:</con:value></con:property><con:property><con:name>counter</con:name><con:value>11</con:value></con:property><con:property><con:name>createDateTemplate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>lastActiveDateTemplate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>idTemplate</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="1c58a07c-4710-4146-9748-a30ad54416ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="5f2281a9-616a-42f2-a953-3abc191a05c5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26202800046558</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>FullName</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1111111111</con:value></con:property></con:properties></con:testCase><con:testCase id="129dfef9-d81c-4603-84fa-23762f5aee2b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="a4362c70-3155-4ff5-8630-3f30b9b8d782"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900063768</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>FullName</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1111111111</con:value></con:property></con:properties></con:testCase><con:testCase id="99a72e1e-6656-42b8-bc74-76609d874335" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="f59b60af-cdc6-4fc7-b93c-ea97b7f158c5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209800235845</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>FullName</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1111111111</con:value></con:property></con:properties></con:testCase><con:testCase id="5dc16953-4292-4b63-a7d7-78957e2f3172" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="f5962f78-e3ef-4f46-9e17-4e4b464d5e1d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26200800187420</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>FullName</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1111111111</con:value></con:property></con:properties></con:testCase><con:testCase id="8c88d063-ecd4-4569-b3e4-912efda20863" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByRequisitFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="8211e10e-83e0-46fa-9404-e1f671bf6b49"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/process" methodName="Payments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Purpose": "${#TestCase#purpose}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  },
  "Recipient": {
        "AccountNumber": "${#TestCase#recipientAccountNumber}",
        "AccountMFO": "${#TestCase#recipientAccountMFO}",
        "AccountType": "${#TestCase#recipientAccountType}",
        "FullName": "${#TestCase#recipientFullName}",
        "UserINN": "${#TestCase#recipientUserINN}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26203800006122</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>FullName</con:value></con:property><con:property><con:name>recipientUserINN</con:name><con:value>1111111111</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="a870c3ea-c955-47cf-a221-b2215aaabc73" name="PaymentsByPhone"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f3576f56-fc23-4a34-a27b-df8c3326d1ec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneA2CMaxAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="7b2ec890-d751-4b3d-a7a8-4f5be6b4a79a"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="38b43c58-8ff4-4b06-83c1-fd5621458c45"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="0dad6a8b-8096-413f-9fb0-fb97b4b1c35e" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="dc1864a3-e141-404a-bc2e-7f170845b9aa"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="141e99dc-1811-42a9-9edb-af0df934499e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByPhone" id="11484a40-5513-444a-af2f-a5df19d83f68"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/create" methodName="/api/v1/payments/phone/create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByPhoneDB" id="b22629fa-e456-4ce0-bb74-120d982f3405"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207719</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>923373</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Тимчук Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="a250c498-a7b3-46e2-b85a-f38557235b7f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneA2АMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="c7022be1-ac74-4613-89a7-2d1a0ebf0761" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="DelayForConfCcode" id="7de6bd65-cd1b-4585-ac37-dd81e13890bb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="75e8a0a0-57ad-4ffa-961c-b0eb4b733c2a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="27ab5973-8cfa-4936-b2b0-980f6179c86d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByPhone" id="dbbd206e-45f0-4307-a408-779064305867"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/create" methodName="/api/v1/payments/phone/create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByPhoneDB" id="ab9d1809-6e4c-4762-a01e-c7b900a17d24"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207720</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>934320</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Тимчук Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="caa86d14-873b-4080-bb51-d105fea0f2db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneNullFee" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="ed0c2ab2-99f7-4919-b46b-2057f2759868" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="DelayForConfCcode" id="be850dc8-72c7-4d98-9499-93f349a8b05f"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="7627bd05-e927-44db-8015-4f048e0392e1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="92e50435-dba8-47e9-a9f9-77bdc577db9a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByPhone" id="bdc537c0-5a32-4e94-8683-ce4795436d2d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/create" methodName="/api/v1/payments/phone/create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByPhoneDB" id="e39807d8-7b07-4e00-9a8d-3bebbf79ed88"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>9999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>feeAmount</con:name><con:value>100</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207721</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>708612</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Тимчук Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="e5619a08-a1aa-4608-8047-a92be55e7f15" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneNotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="723beea0-5990-48d1-9559-7f27705e5463" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="819be42c-0532-4270-8b6c-4ebf2d323901"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a2a869e2-4992-4c78-8439-b7ed1e3b7d22" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Account 26209900044828 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>9999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>feeAmount</con:name><con:value>100</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3597</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>628556</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="6934703a-5e18-4667-a377-859012cb908d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneNotOwnAccSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="7d6f9e24-c500-435f-92fd-faca22802886" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="2b4950c6-22e1-4b9f-aafa-3ec5b59306ce"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a2a869e2-4992-4c78-8439-b7ed1e3b7d22" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Account UA033804180000026201105997905 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>9999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>feeAmount</con:name><con:value>100</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3597</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>628556</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="18d8f5d5-2c2b-4110-8edd-c1a1fbd884af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneNullAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="49d918bd-9aa2-48fb-9def-4e1e1ea6462a" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="bfeb8e7f-52fc-4cda-a63a-7ec8e5dc4aad"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a2a869e2-4992-4c78-8439-b7ed1e3b7d22" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Error converting value \"\" to type 'System.Int64'. Path 'Amount', line 2, position 14. Transfer sum is required."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value/></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>feeAmount</con:name><con:value>100</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3597</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>628556</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="fe814591-b083-428b-982b-1e2bed676e08" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneNullRecipientPhoneNumber" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d91e3463-932f-4d3a-a26f-53464846f748" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="6793cc4e-d80a-4871-860d-facdd0365424"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a2a869e2-4992-4c78-8439-b7ed1e3b7d22" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "You must specify the recipient's phone number."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>feeAmount</con:name><con:value>100</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3597</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>628556</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value/></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="5280311a-82e2-4853-8efd-2e2b9bcc505e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneSenderPhone" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="305f693b-6f50-4ac9-a207-9de42c1f79e9" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="ec67655e-ebcd-46a3-825a-9f2853cba5b6"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a2a869e2-4992-4c78-8439-b7ed1e3b7d22" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "The debit account must be different from the deposit account."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>100</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3597</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>628556</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0999999999</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="637259d1-62a2-43d6-91fb-b6b9555364eb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneToBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="83b66238-e025-4360-89da-40160ebe7668" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="c2f04e98-b875-410a-804c-32d05247f80b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="499320c9-c55c-4af8-971d-8074493b4758"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confCode" id="e79ddbae-aad9-4292-ac63-eb070eac68b9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c4b0ed-0d0e-455f-8435-a85386d946b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPayByPhone" id="633e5b3a-eb16-40c7-b6b7-bcdcd2c84bdc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/create" methodName="/api/v1/payments/phone/create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e29efeb0-74da-4c32-947d-042db1a58754" name="Assertion State"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b44c9c51-6f91-4448-ba78-21f17fc19e1e" name="SetProperty"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="comparePayByPhoneDB" id="c9b5e6fa-5a70-4d4a-abfe-c035a35caaab"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
currencyId = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "senderAccountMFO")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "recipientAccountNumber")
compare (mfoB, "recipientAccountMFO")
compare (innB, "innB") 
compare (fullNameB, "recipientFullName") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeA, "senderAccountType")
compare (accountTypeB, "recipientAccountType")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (currencyId, "currencyId")
compare (authorizationIdA, "authorizationIdA") 
compare (authorizationIdB, "authorizationIdB") 
compare (documentState, "documentState")
compare (paymentPurpose, "purpose")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateExpect") 
compare (absId, "absIdExpect") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207722</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>019422</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>23122342342343</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>КОМАШКО ОЛЬГА Анатоліївна</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0500789745</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="eebf3f56-51cc-4c62-8c2a-79b7e3da73e0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="8038a647-f5e8-4f80-a1cf-345eee5331cb" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="9774b08b-b468-4e53-8e3a-870e4b1a75c1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9645ccaf-552b-491c-bd35-600d12e39788" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Account UA043804180000026301000089078 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3594</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>455483</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="5beda1b6-cd80-432e-bb88-590d860616e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneA2AAmountMoreAvailable" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="260485b0-9329-416f-9beb-cbbf5e41faee" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="e106217c-2ebb-4508-8ffe-15f80390933e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44a3b114-3424-499c-9b3b-d149de8b089e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3594</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>455483</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="074fd148-a440-4851-b261-fbae78d42277" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneC2AAmountMoreAvailable" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="bd181592-b5a6-44af-b82a-92ee69a35f5d" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="e9b379e3-7997-4a38-8cd1-a1cfef7a40f3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="44a3b114-3424-499c-9b3b-d149de8b089e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>19803</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3594</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>455483</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="5077d327-0f16-4a62-b4d9-7d3ed96b2765" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneAccNotContainPhone" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="764dbf26-1ae3-4bb6-b7c2-430165ecb236" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPayByPhone" id="3fc9df67-6f93-4f63-8924-b025ff2e2c5c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPayByPhone" id="8d9b4b9e-938f-4242-a0d7-33c24cdfb83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.13/auth/logon/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="536926c5-d6ad-4934-925e-de63223aeec2" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c5f47c48-1ae4-4a93-a7d2-102d0f18721d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message == "Client with this phone number does not have an account in the system"</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value=""/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>currencyId</con:name><con:value>980</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>495</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3594</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>455483</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA443804180000026200900044827</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0633322333</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="dfe9e791-7b1a-4084-ad7f-c0d13a86b703" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="8689c2b5-b819-47f6-90d7-4a208c9fec5e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26202800046558</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property></con:properties></con:testCase><con:testCase id="8cb5bcc8-8d3d-40b2-8ec4-32ee778f7bd0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="c4e8df23-c678-42bb-aa99-b0dee42a77ff"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26202800046558</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property></con:properties></con:testCase><con:testCase id="955cc42d-8fba-4101-bd21-aaa0037a87c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="c6a70d35-d3a3-4b39-b8fd-984a74c5e4b9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209800235845</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property></con:properties></con:testCase><con:testCase id="e3779f88-72fd-4b6a-84c2-160960bd87d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="3fe2b87e-5a35-4e41-bbba-60535cd3f5db"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26200800187420</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property></con:properties></con:testCase><con:testCase id="a789a9ed-79ad-46ef-9ce8-e58643219cd7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayByPhoneFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="e8b57026-3cba-4009-a3d1-ecfb081fcc00"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/phone/process" methodName="/api/v1/payments/phone/process" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestCase#paymentType}",
  "RecipientFullName": "${#TestCase#recipientFullName}",
  "RecipientPhoneNumber": "${#TestCase#recipientPhoneNumber}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json, charset=UTF-8 "/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>111</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_PHONE</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26203800006122</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA423804180000026209015023347</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>Переказ грошових коштів</con:value></con:property><con:property><con:name>recipientFullName</con:name><con:value>Т***** Артем Дмитрович</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0507010522</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="2cfbb2f5-6d72-4657-b3b2-f6bfaf855f9f" name="PaymentsFrameP2PAccountToCard"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ba18594e-0262-429a-96b4-c90249b6b9db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CValidToVisa" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="f6f6a240-8db6-4386-a4df-b8889731f11a"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="845e8f46-cd34-469e-9e36-ae339182b1e7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="ef5f95c9-3c22-4636-8c40-6ee30bd78595" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="8d757f27-efcc-4a4f-ac35-d0c29000fe81"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="418ea265-ef84-4aff-b041-ef5704334bbe"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="204be076-adf3-4bb3-8f1b-598566e79640"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  },
  "ConfirmationCode": "${#Project#otp}",
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c1965ed-5a02-4f6b-a2ae-a42d88197838" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83c2dc8d-c849-48fc-939b-1bf333cdfbd1" name="Script Assertion PAYMENTS" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.GroovyUtils
import groovy.sql.*

//those are feched from testsuite properties
def dbUrl='jdbc:oracle:thin:@10.10.17.151:1521:OBCL'
def dbUser='bone'
def dbPass='bone'
def dbDriver='oracle.jdbc.driver.OracleDriver'

def db = Sql.newInstance(dbUrl, dbUser, dbPass, dbDriver)

def user_id =  context.getTestCase().testSuite.project.getPropertyValue( "user_id" )

def dbValues = db.rows( "select * from PAYMENTS t where t.id = " +  context.getTestCase().getPropertyValue( "idPay" ))
Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}
 assert dbValues.state.toString() == '[BANKPAYED]'
 assert dbValues.payment_type.toString() == '[OUTER_CARD]'
 assert dbValues.currency_code.toString() == '[UAH]'
 assert dbValues.abs_id.toString() .notIn( ['[null]','[0]'])
 assert dbValues.abs_date.toString().notIn( ['[null]','[0]'])
 assert dbValues.amount.toString() == '[' + context.getTestCase().getPropertyValue( "amount" ) + ']'
 assert dbValues.acc_b.toString() == '[' + context.getTestCase().getPropertyValue( "acc_b" ) + ']'
 assert dbValues.acc_a.toString() == '[' + context.getTestCase().getPropertyValue( "SenderAccountNumber" ) + ']'
 assert dbValues.document_type.toString() == '[9]'
 assert dbValues.document_state.toString() == '[2]'
 assert dbValues.transaction_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.transaction_id_b.toString().notIn( ['[null]','[0]'])
 assert dbValues.account_type_a.toString() == '[CARD]'
 assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
  assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.authorization_id_b.toString() =='[null]'
 assert dbValues.error_message.toString() == '[null]'
 assert dbValues.deal_id.toString() == '[null]'
 assert dbValues.inn_b.toString() != '[null]'
  assert dbValues.fee_amount.toString() == '[' + context.getTestCase().getPropertyValue( "fee_amount" ) + ']'

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="26103b53-4984-4d5e-b84b-cacc66274c3e" name="Set property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)
  context.getTestCase().setPropertyValue ('stateResponse',   stateResponse)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="f8e129f2-1bb9-4190-a1c6-9d3f088a092e"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )
def response = testRunner.testCase.getTestStepByName('createPaymentOuterCard').getPropertyValue("response")
def State = parse(response).read('$.State')

if (State=='BANKERROR' || State=='BANKSENT' ) {
	testRunner.gotoStepByName("compareErrorPaymentA2CDB")
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentA2CDB" id="00e9af33-601e-4235-a3fb-1809b8cb1c80"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from payments t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absId") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdB")
compare (state, "expectedState")
compare (transactionDate, "transactionDate")
compare (absDate, "absDate") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="8c82f38e-304c-4bcb-ac3d-76d21a451d5f"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentA2CDB" id="eb6d9db0-1bb1-4d1b-b76d-5aaa630a6f8e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '2'
}


</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"RecipientCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207723</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property></con:properties></con:testCase><con:testCase id="10143071-1de8-4720-a989-3d1853c7c72e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CMaxAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="4c719c17-8296-4fa8-8200-63754a77f282" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6e5a803f-9a14-49c0-938a-75103cf217f1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="8251deab-fa6d-4b1c-8ea1-eca73b388be7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="a98ad74b-1632-4c83-bdc4-b6e0259dff94"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="35915a75-bb42-47a6-a332-079204350574"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  },
  "ConfirmationCode": "${#Project#otp}",
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c1965ed-5a02-4f6b-a2ae-a42d88197838" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83c2dc8d-c849-48fc-939b-1bf333cdfbd1" name="Script Assertion PAYMENTS" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.GroovyUtils
import groovy.sql.*

//those are feched from testsuite properties
def dbUrl='jdbc:oracle:thin:@10.10.17.151:1521:OBCL'
def dbUser='bone'
def dbPass='bone'
def dbDriver='oracle.jdbc.driver.OracleDriver'

def db = Sql.newInstance(dbUrl, dbUser, dbPass, dbDriver)

def user_id =  context.getTestCase().testSuite.project.getPropertyValue( "user_id" )

def dbValues = db.rows( "select * from PAYMENTS t where t.id = " +  context.getTestCase().getPropertyValue( "idPay" ))
Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}
 assert dbValues.state.toString() == '[BANKPAYED]'
 assert dbValues.payment_type.toString() == '[OUTER_CARD]'
 assert dbValues.currency_code.toString() == '[UAH]'
 assert dbValues.abs_id.toString() .notIn( ['[null]','[0]'])
 assert dbValues.abs_date.toString().notIn( ['[null]','[0]'])
 assert dbValues.amount.toString() == '[' + context.getTestCase().getPropertyValue( "amount" ) + ']'
 assert dbValues.acc_b.toString() == '[' + context.getTestCase().getPropertyValue( "acc_b" ) + ']'
 assert dbValues.acc_a.toString() == '[' + context.getTestCase().getPropertyValue( "SenderAccountNumber" ) + ']'
 assert dbValues.document_type.toString() == '[9]'
 assert dbValues.document_state.toString() == '[2]'
 assert dbValues.transaction_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.transaction_id_b.toString().notIn( ['[null]','[0]'])
 assert dbValues.account_type_a.toString() == '[CARD]'
 assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
  assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.authorization_id_b.toString() =='[null]'
 assert dbValues.error_message.toString() == '[null]'
 assert dbValues.deal_id.toString() == '[null]'
 assert dbValues.inn_b.toString() != '[null]'
  assert dbValues.fee_amount.toString() == '[' + context.getTestCase().getPropertyValue( "fee_amount" ) + ']'

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="26103b53-4984-4d5e-b84b-cacc66274c3e" name="Set property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)
  context.getTestCase().setPropertyValue ('stateResponse',   stateResponse)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="ed44a9ad-8a7b-4bfc-8378-3ab3b7f71948"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )
def response = testRunner.testCase.getTestStepByName('createPaymentOuterCard').getPropertyValue("response")
def State = parse(response).read('$.State')

if (State=='BANKERROR' || State=='BANKSENT' ) {
	testRunner.gotoStepByName("compareErrorPaymentA2CDB")
}

</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentA2CDB" id="e2b6345f-3822-41fb-aefb-22e10ab3cd2b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absId") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdB")
compare (state, "expectedState")
compare (transactionDate, "transactionDate")
compare (absDate, "absDate") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="1fa2afb3-7954-47a1-930b-dbe3ec38dbb2"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentA2CDB" id="97e6e1c5-ba0a-4ee7-8afd-b191c8e4f537"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '2'
}


</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"RecipientCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207724</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testCase><con:testCase id="745bbebc-46c2-489c-96dc-4aac8fbcc243" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="e942435e-469b-43b2-af94-4d8ba07d049a" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="e4200dae-3199-4866-9b62-fe10ea0de77b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="07a8013f-d3f5-4e45-95de-8a152f722f51"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="7d5c55b0-4e3a-4ea2-8455-092adf45f537"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="eed8543f-5a7a-4176-b963-f73710e6eef3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  },
  "ConfirmationCode": "${#Project#otp}",
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c1965ed-5a02-4f6b-a2ae-a42d88197838" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83c2dc8d-c849-48fc-939b-1bf333cdfbd1" name="Script Assertion PAYMENTS" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.GroovyUtils
import groovy.sql.*

//those are feched from testsuite properties
def dbUrl='jdbc:oracle:thin:@10.10.17.151:1521:OBCL'
def dbUser='bone'
def dbPass='bone'
def dbDriver='oracle.jdbc.driver.OracleDriver'

def db = Sql.newInstance(dbUrl, dbUser, dbPass, dbDriver)

def user_id =  context.getTestCase().testSuite.project.getPropertyValue( "user_id" )

def dbValues = db.rows( "select * from PAYMENTS t where t.id = " +  context.getTestCase().getPropertyValue( "idPay" ))
Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}
 assert dbValues.state.toString() == '[BANKPAYED]'
 assert dbValues.payment_type.toString() == '[OUTER_CARD]'
 assert dbValues.currency_code.toString() == '[UAH]'
 assert dbValues.abs_id.toString() .notIn( ['[null]','[0]'])
 assert dbValues.abs_date.toString().notIn( ['[null]','[0]'])
 assert dbValues.amount.toString() == '[' + context.getTestCase().getPropertyValue( "amount" ) + ']'
 assert dbValues.acc_b.toString() == '[' + context.getTestCase().getPropertyValue( "acc_b" ) + ']'
 assert dbValues.acc_a.toString() == '[' + context.getTestCase().getPropertyValue( "SenderAccountNumber" ) + ']'
 assert dbValues.document_type.toString() == '[9]'
 assert dbValues.document_state.toString() == '[2]'
 assert dbValues.transaction_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.transaction_id_b.toString().notIn( ['[null]','[0]'])
 assert dbValues.account_type_a.toString() == '[CARD]'
 assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
  assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.authorization_id_b.toString() =='[null]'
 assert dbValues.error_message.toString() == '[null]'
 assert dbValues.deal_id.toString() == '[null]'
 assert dbValues.inn_b.toString() != '[null]'
  assert dbValues.fee_amount.toString() == '[' + context.getTestCase().getPropertyValue( "fee_amount" ) + ']'

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="26103b53-4984-4d5e-b84b-cacc66274c3e" name="Set property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)
  context.getTestCase().setPropertyValue ('stateResponse',   stateResponse)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="bbe63499-76d7-4e82-9d8a-37773cf2ecf0"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )
def response = testRunner.testCase.getTestStepByName('createPaymentOuterCard').getPropertyValue("response")
def State = parse(response).read('$.State')

if (State=='BANKERROR' || State=='BANKSENT' ) {
	testRunner.gotoStepByName("compareErrorPaymentA2CDB")
}

</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentA2CDB" id="de6353ba-a9ee-41eb-9801-1e3a25f93a0f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameB") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absId") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdB")
compare (state, "expectedState")
compare (transactionDate, "transactionDate")
compare (absDate, "absDate") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="231027db-1f3e-49ad-b8d5-b0b08497f219"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentA2CDB" id="1339a52b-61e6-40dd-b3df-787c761df678"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '2'
}


</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"RecipientCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207725</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testCase><con:testCase id="f9b67fb4-1aeb-41b4-8bea-83afe0d187c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CNotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="fa8b900e-7904-4045-9151-3d17d954f3e0" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="1b921d33-e8c4-4133-9742-c3214637a5c3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4432661f-b786-4ebe-92c9-2eaae986bf69" disabled="true"><con:settings/><con:config><delay>4000</delay></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>7</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:testCase id="3cec0f1a-0b9d-4292-a506-366b4bbd9684" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="7785b5e1-3e2c-4509-8d8b-6d95adfe8a02" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="7cd39c22-b87e-454e-bdb7-4b13c9d4378f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4ec4407-d8a6-43a8-a515-15ed7f5c8953" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="en"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20001</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:testCase id="cc036b31-e27b-42b8-81cb-f47f01d24335" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CAmountRateMoreMax" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="9397515b-7364-421c-97f8-0dfa6d1c4e49" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="ee0ea72f-e4f4-424e-b7c7-7e07b5f89609"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4ec4407-d8a6-43a8-a515-15ed7f5c8953" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="en"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20000</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:testCase id="73fe60a7-226f-4d61-8ebc-d7e79ed5415a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CAmountRateMoreMaxLimit" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="9afef940-d37c-4c30-ad2e-7bd89195c0c7" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="751570d4-2e7c-438c-83c3-63d549a9159e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4ec4407-d8a6-43a8-a515-15ed7f5c8953" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Transfer limit for this type of operation, incliuding fee, 14999 is exceeded."
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="en"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1499901</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26208800100948</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:testCase id="c50a12f4-df99-4840-8871-1703f8668459" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="a9f0e84e-fbb3-4e35-81f8-1febef8c9b8d" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="79391486-f161-46ad-8ee9-e31c61bea75d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="feecd0da-3021-43bd-a813-dc36eb94afd7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "По обраній картці перекази заборонені."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1457</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>15</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"RecipientCardNumMask":"499999******0011"}</con:value></con:property></con:properties></con:testCase><con:testCase id="6f24df5a-d03b-4844-a28d-3231699c969f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="27310b56-6122-4815-9379-299c06cbbe88" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="3c0b083e-e4cc-43b7-9b26-5f5e73e48d93"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="5da066ec-fdb8-4175-95a6-e344d88aea50"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  },
  "ConfirmationCode": "${#TestCase#otp}",
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dd4604e5-6721-4d42-a77c-216a067c0ef7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Код підтвердження неправильний."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="810de255-d920-4b53-b45f-f61968c269ed"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"RecipientCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property></con:properties></con:testCase><con:testCase id="9db550f6-ba3c-425e-ae10-aeb0ccd67392" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="8511a08a-6246-4441-b5d1-febba1e0865c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property></con:properties></con:testCase><con:testCase id="a14c1967-ac55-4807-a881-e6d3280d08ec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="c72d5bb6-4453-4dfd-93b0-76d439ca7d1f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>30</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property></con:properties></con:testCase><con:testCase id="83f2c131-3866-4544-8df1-138f38d08946" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="30b976c2-2af9-4537-87a8-518f91c8a9f4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111105</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>35</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property></con:properties></con:testCase><con:testCase id="be85cb58-d361-4571-b380-3d83db3a2256" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="8b0ef8ce-d6c8-47ba-9bd3-2bec02d99ebc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111106</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>36</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property></con:properties></con:testCase><con:testCase id="c868c7de-94c2-4684-ad11-956813de7413" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PA2CFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="6e5cd1ad-b198-43e6-91f6-68469e4d8dec"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111107</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>37</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>orderedCardNum</con:name><con:value>4111111111111101</con:value></con:property></con:properties></con:testSuite><con:testSuite id="98fe628b-839c-4f88-b3dc-5ba9c92ce1c5" name="PaymentsTokenР2РAccountToCard"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ef37d7c7-95e9-47b8-85bb-97124cc9603b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CValidToVisa" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="b20f9142-b4c3-47f2-b737-6c80cf35f719"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="f645a361-116b-4d9b-b005-20a5d795f9b6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="b3d0e5a8-8690-4b48-b3d2-8d5dee9cc2d3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="fcb7ed55-4c4c-4444-b0fc-f9fecdc4b237"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"

  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
 
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="65aa6811-9fe9-4631-b661-d4eb1a7b695e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="1bdf1987-49ac-4974-b8c4-82e8e914a1d9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
    "ExternalCardId": "${#TestCase#RecipientCardID}"
  },
  "ConfirmationCode": "${#Project#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes" disabled="true"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cbe2881f-ad4f-4b3b-923d-065575246c60" name="Script Assertion" disabled="true"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c1965ed-5a02-4f6b-a2ae-a42d88197838" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83c2dc8d-c849-48fc-939b-1bf333cdfbd1" name="Script Assertion PAYMENTS" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.GroovyUtils
import groovy.sql.*

//those are feched from testsuite properties
def dbUrl='jdbc:oracle:thin:@10.10.17.151:1521:OBCL'
def dbUser='bone'
def dbPass='bone'
def dbDriver='oracle.jdbc.driver.OracleDriver'

def db = Sql.newInstance(dbUrl, dbUser, dbPass, dbDriver)

def user_id =  context.getTestCase().testSuite.project.getPropertyValue( "user_id" )

def dbValues = db.rows( "select * from PAYMENTS t where t.id = " +  context.getTestCase().getPropertyValue( "idPay" ))
Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}
 assert dbValues.state.toString() == '[BANKPAYED]'
 assert dbValues.payment_type.toString() == '[OUTER_CARD]'
 assert dbValues.currency_code.toString() == '[UAH]'
 assert dbValues.abs_id.toString() .notIn( ['[null]','[0]'])
 assert dbValues.abs_date.toString().notIn( ['[null]','[0]'])
 assert dbValues.amount.toString() == '[' + context.getTestCase().getPropertyValue( "amount" ) + ']'
 assert dbValues.acc_b.toString() == '[' + context.getTestCase().getPropertyValue( "acc_b" ) + ']'
 assert dbValues.acc_a.toString() == '[' + context.getTestCase().getPropertyValue( "SenderAccountNumber" ) + ']'
 assert dbValues.document_type.toString() == '[9]'
 assert dbValues.document_state.toString() == '[2]'
 assert dbValues.transaction_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.transaction_id_b.toString().notIn( ['[null]','[0]'])
 assert dbValues.account_type_a.toString() == '[CARD]'
 assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
  assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.authorization_id_b.toString() =='[null]'
 assert dbValues.error_message.toString() == '[null]'
 assert dbValues.deal_id.toString() == '[null]'
 assert dbValues.inn_b.toString() != '[null]'
  assert dbValues.fee_amount.toString() == '[' + context.getTestCase().getPropertyValue( "fee_amount" ) + ']'

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="26103b53-4984-4d5e-b84b-cacc66274c3e" name="Set property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)
  context.getTestCase().setPropertyValue ('stateResponse',   stateResponse)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="2fe4f1ca-0b79-44e6-8127-3fe13c086b0e"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )
def response = testRunner.testCase.getTestStepByName('createPaymentOuterCard').getPropertyValue("response")
def State = parse(response).read('$.State')

if (State=='BANKERROR' || State=='BANKSENT' ) {
	testRunner.gotoStepByName("compareErrorPaymentA2CDB")
}</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentA2CDB" id="6df533f2-add8-483d-96e2-78545b4324ad"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE") 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.getTestCase().getPropertyValue( parameter )
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (state, "expectedState")
compare (paymentType, "paymentType")
compare (currencyCode, "currencyCode")
compare (amount, "amount")
compare (acc_b, "acc_b")
compare (acc_a, "SenderAccountNumber")
compare (documentType, "documentType")
compare (documentState, "documentState")
compare (accountTypeA, "SenderAccountType")
compare (authorizationIdB, "authorizationIdB")
compare (errorMessage, "errorMessage")
compare (dealId, "dealId")
compare (feeAmount, "feeAmount")
compare(absId,  "absIdExpect") 
compare(absDate,  "absDateExpect") 
compare(transactionIdB,  "transactionIdBExpect") 
compare(authorizationIdA,  "authorizationIdAExpect") 
compare(innB,  "innBExpect") 
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="bf3b0fb8-078d-40ba-add0-2fc5853bd41d"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentA2CDB" id="42ec31dd-9aab-41d6-b77d-390e95d9b016"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '2'
}

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207726</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testCase><con:testCase id="20c8310a-059b-47af-ae84-245a8c71704a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CNotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="f6ea73bd-5020-4021-b4c6-fc82739cb98c" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="66880b71-4ffa-4c12-91ce-2f3892009161"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
      "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>7</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>165</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property></con:properties></con:testCase><con:testCase id="a207b073-b835-4249-b834-38540b44b3c9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="4ef0fe6d-d5d1-45dc-9d0a-82ab9c0516a2" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="52b165da-8524-40cb-885a-b3eb67e9ee5e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
    "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4ec4407-d8a6-43a8-a515-15ed7f5c8953" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="en"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20001</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property></con:properties></con:testCase><con:testCase id="3f3421ad-04c4-4ee3-980d-ca7482488eef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CInValidRecipientCardID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d44f11ad-a64b-4099-9099-5ba227bf563c" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="2697142c-bf6e-42c7-bac2-0564c81f452c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
    "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>404
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f50f21ef-5d17-415d-bb4c-7b950b47b709" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def parser = new JsonSlurper().parseText(response)
 def RecipientCardId = messageExchange.modelItem.testStep.testCase.getPropertyValue("recipientCardId") 

  assert parser.Message.toString() ==  "You have not any cards."
 
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>idPay</con:name><con:value>1108</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>documentState</con:name><con:value>5</con:value></con:property><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990029</con:value></con:property><con:property><con:name>errorMessageExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>42</con:value></con:property></con:properties></con:testCase><con:testCase id="7137ac9e-5f49-40df-84a4-5dbe54b53703" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CMaxAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="49f88925-b687-44bf-b5c2-3bc22582b464" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="f6a0c19c-d965-4949-aa25-93edb4f2b5dd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="636f55fe-b6c2-4bbf-b26e-bf8687b35692"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="b68d058d-2b42-462b-a588-0572b8773aa9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="a3435b23-bc63-4423-88d6-c00afcbf16d3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
    "ExternalCardId": "${#TestCase#RecipientCardID}"
  },
  "ConfirmationCode": "${#Project#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c1965ed-5a02-4f6b-a2ae-a42d88197838" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83c2dc8d-c849-48fc-939b-1bf333cdfbd1" name="Script Assertion PAYMENTS" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.GroovyUtils
import groovy.sql.*

//those are feched from testsuite properties
def dbUrl='jdbc:oracle:thin:@10.10.17.151:1521:OBCL'
def dbUser='bone'
def dbPass='bone'
def dbDriver='oracle.jdbc.driver.OracleDriver'

def db = Sql.newInstance(dbUrl, dbUser, dbPass, dbDriver)

def user_id =  context.getTestCase().testSuite.project.getPropertyValue( "user_id" )

def dbValues = db.rows( "select * from PAYMENTS t where t.id = " +  context.getTestCase().getPropertyValue( "idPay" ))
Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}
 assert dbValues.state.toString() == '[BANKPAYED]'
 assert dbValues.payment_type.toString() == '[OUTER_CARD]'
 assert dbValues.currency_code.toString() == '[UAH]'
 assert dbValues.abs_id.toString() .notIn( ['[null]','[0]'])
 assert dbValues.abs_date.toString().notIn( ['[null]','[0]'])
 assert dbValues.amount.toString() == '[' + context.getTestCase().getPropertyValue( "amount" ) + ']'
 assert dbValues.acc_b.toString() == '[' + context.getTestCase().getPropertyValue( "acc_b" ) + ']'
 assert dbValues.acc_a.toString() == '[' + context.getTestCase().getPropertyValue( "SenderAccountNumber" ) + ']'
 assert dbValues.document_type.toString() == '[9]'
 assert dbValues.document_state.toString() == '[2]'
 assert dbValues.transaction_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.transaction_id_b.toString().notIn( ['[null]','[0]'])
 assert dbValues.account_type_a.toString() == '[CARD]'
 assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
  assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.authorization_id_b.toString() =='[null]'
 assert dbValues.error_message.toString() == '[null]'
 assert dbValues.deal_id.toString() == '[null]'
 assert dbValues.inn_b.toString() != '[null]'
  assert dbValues.fee_amount.toString() == '[' + context.getTestCase().getPropertyValue( "fee_amount" ) + ']'

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="26103b53-4984-4d5e-b84b-cacc66274c3e" name="Set property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)
  context.getTestCase().setPropertyValue ('stateResponse',   stateResponse)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="400afe01-afe8-47a8-aa7f-617130b56956"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )
def response = testRunner.testCase.getTestStepByName('createPaymentOuterCard').getPropertyValue("response")
def State = parse(response).read('$.State')

if (State=='BANKERROR' || State=='BANKSENT' ) {
	testRunner.gotoStepByName("compareErrorPaymentA2CDB")
}</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentA2CDB" id="15e2aae6-e705-4674-97c4-f5e5bfde77e8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE") 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String expect ){
assert actual == context.getTestCase().getPropertyValue( expect )  : "ERROR compare/ actual:  " +  actual + " /expect: " 
}
///////////////  Comparison of unknown parameters. Expected not null
public void compareNotNull (String actual,String expect, String parameterName ){
 assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameterName
}

compare (state, "expectedState")
compare (paymentType, "paymentType")
compare (currencyCode, "currencyCode")
compare (amount, "amount")
compare (acc_b, "acc_b")
compare (acc_a, "SenderAccountNumber")
compare (documentType, "documentType")
compare (documentState, "documentState")
compare (accountTypeA, "SenderAccountType")
compare (authorizationIdB, "authorizationIdB")
compare (errorMessage, "errorMessage")
compare (dealId, "dealId")
compare (feeAmount, "feeAmount")
compareNotNull(absId, absIdExpect, "absId") 
compareNotNull(absDate, absDateExpect, "absDate") 
compareNotNull(transactionIdB, transactionIdBExpect, "transactionIdB") 
compareNotNull(authorizationIdA, authorizationIdAExpect, "compareNotNull") 
compareNotNull(innB, innBExpect, "innB") 
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="29cc590a-14b0-42a0-8b73-88f4dadfcfa5"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentA2CDB" id="60d21c3d-c516-4f5b-846e-595343ba0431"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '2'
}</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207727</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>198</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testCase><con:testCase id="e095edc4-d0d3-4a74-bcbc-f506a13887fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="8a368ec7-f681-4fbe-9f25-411f0c4a7dcd" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="783374f6-f65a-4d49-a56f-df3957bad203"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="582ac17c-72fe-4997-95f4-9c1f202e1964"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="78193818-7092-4b44-88b7-175ff15f0af4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().getTestSuite().getProject().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="f141ca0d-5f86-4271-bfa8-c45b0f0ceb5e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
    "ExternalCardId": "${#TestCase#RecipientCardID}"
  },
  "ConfirmationCode": "${#Project#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c1965ed-5a02-4f6b-a2ae-a42d88197838" name="Logger"><con:configuration><scriptText>def response = messageExchange.response.responseContent
def requestBody = messageExchange.requestContent 
def requestHeader = messageExchange.requestHeaders
def headers = messageExchange.response.responseHeaders
def actualHTTPResponse = headers['#status#']

  if( !actualHTTPResponse[0].startsWith("HTTP/1.1 200 OK")){
  	log.error('ERROR Test suite is ' +context.getTestCase().getTestSuite().getName())
  	log.error('ERROR Test case is ' +context.getTestCase().getName())
  	log.error('ERROR Response headers is ' + headers)
  	log.error('ERROR Response body is ' + response)
  	log.error('ERROR Response headers is ' + requestHeader)
  	log.error("ERROR Reguest body is " +requestBody)
  }</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83c2dc8d-c849-48fc-939b-1bf333cdfbd1" name="Script Assertion PAYMENTS" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.GroovyUtils
import groovy.sql.*

//those are feched from testsuite properties
def dbUrl='jdbc:oracle:thin:@10.10.17.151:1521:OBCL'
def dbUser='bone'
def dbPass='bone'
def dbDriver='oracle.jdbc.driver.OracleDriver'

def db = Sql.newInstance(dbUrl, dbUser, dbPass, dbDriver)

def user_id =  context.getTestCase().testSuite.project.getPropertyValue( "user_id" )

def dbValues = db.rows( "select * from PAYMENTS t where t.id = " +  context.getTestCase().getPropertyValue( "idPay" ))
Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}
 assert dbValues.state.toString() == '[BANKPAYED]'
 assert dbValues.payment_type.toString() == '[OUTER_CARD]'
 assert dbValues.currency_code.toString() == '[UAH]'
 assert dbValues.abs_id.toString() .notIn( ['[null]','[0]'])
 assert dbValues.abs_date.toString().notIn( ['[null]','[0]'])
 assert dbValues.amount.toString() == '[' + context.getTestCase().getPropertyValue( "amount" ) + ']'
 assert dbValues.acc_b.toString() == '[' + context.getTestCase().getPropertyValue( "acc_b" ) + ']'
 assert dbValues.acc_a.toString() == '[' + context.getTestCase().getPropertyValue( "SenderAccountNumber" ) + ']'
 assert dbValues.document_type.toString() == '[9]'
 assert dbValues.document_state.toString() == '[2]'
 assert dbValues.transaction_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.transaction_id_b.toString().notIn( ['[null]','[0]'])
 assert dbValues.account_type_a.toString() == '[CARD]'
 assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
  assert dbValues.authorization_id_a.toString().notIn( ['[null]','[0]'])
 assert dbValues.authorization_id_b.toString() =='[null]'
 assert dbValues.error_message.toString() == '[null]'
 assert dbValues.deal_id.toString() == '[null]'
 assert dbValues.inn_b.toString() != '[null]'
  assert dbValues.fee_amount.toString() == '[' + context.getTestCase().getPropertyValue( "fee_amount" ) + ']'

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="26103b53-4984-4d5e-b84b-cacc66274c3e" name="Set property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)
  context.getTestCase().setPropertyValue ('stateResponse',   stateResponse)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="1fd55fa8-66a3-4bd7-aaea-9e1858184340"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )
def response = testRunner.testCase.getTestStepByName('createPaymentOuterCard').getPropertyValue("response")
def State = parse(response).read('$.State')

if (State=='BANKERROR' || State=='BANKSENT' ) {
	testRunner.gotoStepByName("compareErrorPaymentA2CDB")
}</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentA2CDB" id="6df51909-ee5f-429a-93d7-6236d908098f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE") 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String expect ){
assert actual == context.getTestCase().getPropertyValue( expect )  : "ERROR compare/ actual:  " +  actual + " /expect: " 
}
///////////////  Comparison of unknown parameters. Expected not null
public void compareNotNull (String actual,String expect, String parameterName ){
 assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameterName
}

compare (state, "expectedState")
compare (paymentType, "paymentType")
compare (currencyCode, "currencyCode")
compare (amount, "amount")
compare (acc_b, "acc_b")
compare (acc_a, "SenderAccountNumber")
compare (documentType, "documentType")
compare (documentState, "documentState")
compare (accountTypeA, "SenderAccountType")
compare (authorizationIdB, "authorizationIdB")
compare (errorMessage, "errorMessage")
compare (dealId, "dealId")
compare (feeAmount, "feeAmount")
compareNotNull(absId, absIdExpect, "absId") 
compareNotNull(absDate, absDateExpect, "absDate") 
compareNotNull(transactionIdB, transactionIdBExpect, "transactionIdB") 
compareNotNull(authorizationIdA, authorizationIdAExpect, "compareNotNull") 
compareNotNull(innB, innBExpect, "innB") 
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="33d9dd5c-03f9-4184-83d6-d35facbed821"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentA2CDB" id="6f4495fd-22d9-4c0a-80b0-e8d50573ef97"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA.notIn([ 'null','0'] ) 
	assert documentState == '2'
}</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207728</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testCase><con:testCase id="56b29bef-89e2-47e0-b1ed-bcf39ca95fb4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CAmountRateMoreMax" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="cbb86365-9cee-4b6b-90d5-669391c4abb6" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="9a576aaa-d1bd-4c10-acc2-61df9c552678"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8daae777-8026-4c57-a324-7c252eaaf15d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20000</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1113</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property></con:properties></con:testCase><con:testCase id="f6e10366-cd80-49e8-8872-e0f4dcf7373d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CAmountRateMoreLimitMax" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="699fa188-5f43-4b85-ad3b-b9c37cd6b972" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="b55065d4-e3b5-4982-8f8f-ddc9790ee694"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8daae777-8026-4c57-a324-7c252eaaf15d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Transfer limit for this type of operation, incliuding fee, 14999 is exceeded."
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1499901</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1113</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property></con:properties></con:testCase><con:testCase id="14ed9477-17b0-46e9-8cd0-753e836999e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="8d931462-e726-4214-97bf-38b730534933" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="f367d29f-0601-4276-be24-0f5daebbed8e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
      "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="73cde8a3-a8c4-45a5-8f10-4e219cb53403" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>fee</con:name><con:value>9980</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>15</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>165</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property></con:properties></con:testCase><con:testCase id="0930324a-d0aa-48ac-a3e1-4effeed832fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenР2РA2CWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="17d0dd17-c3ec-4de6-b132-ec6dda456fc4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"

  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
 
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="34c21cb7-f6f0-475b-8343-0252d87a3a3e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="04b12eb0-89ab-473f-87a8-edde54ef7dc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType":"${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
    "ExternalCardId": "${#TestCase#RecipientCardID}"
  },
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a1f65838-5824-47ca-9ae4-cfee94480d97" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cbe2881f-ad4f-4b3b-923d-065575246c60" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="a9c08f9e-dc81-4410-9d72-3cfd2d1d3a09"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>29245021301003</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdAExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>11</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2497</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>transactionIdBExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property></con:properties></con:testCase><con:testCase id="22d365f1-aba4-4863-b6af-874273def1b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PA2CFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="1782d1ba-efbb-4992-a282-640007b8abeb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property></con:properties></con:testCase><con:testCase id="b0ea6f80-59d9-4855-9306-ef6f4d9de4db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PA2CFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="4a83351d-0b60-464c-ad76-8da660f3ee30"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>30</con:value></con:property></con:properties></con:testCase><con:testCase id="8d3d2729-0337-4c83-99fe-3400bbdb9263" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PA2CFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="0b3eb157-f827-4f6f-8a1c-5a52eb66cb0f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111105</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>35</con:value></con:property></con:properties></con:testCase><con:testCase id="2bfc1fde-cdcd-4456-9759-2dc1c53be187" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PA2CFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="1c4e5329-4a4f-46da-8660-adb35c0c6797"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111106</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>36</con:value></con:property></con:properties></con:testCase><con:testCase id="9551d4c5-6219-408a-90e2-3ecd31978f60" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PA2CFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="932bd7df-6b62-429d-b2ae-de953437cc3e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/accountToCard/external/process" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestCase#paymentType}",
  "Fee": "${#TestCase#fee}",
  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestCase#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}",
    "CardId":  "${#TestCase#senderCardId}"
  },
  "Recipient": {
    "CardNumber":  "${#TestCase#recipientCardNumber}",
     "ExternalCardId": "${#TestCase#recipientCardID}"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>OUTER_CARD</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>41</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4111111111111102</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111107</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>37</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="42a2f099-cefd-45ab-94ce-bbd0687d3ee1" name="PaymentsFrameP2PCardToAccount" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f1158530-04ff-4b3d-937d-d63da2b1f8e7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AValidToVisa" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="657c6e07-a667-4034-b6e9-c2e2ed446865"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="349e8644-cac4-414c-90cc-393e78350c72"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="09300cae-fafe-43e4-8106-fcb2d2f768f2"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7007162b-e4b1-4cbe-a38c-78d7c0b2c55d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == 'BANKNEW'
  </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="46afbcc0-cce5-4d9c-8acf-a41cf9bbbae1" name="SetPropertyValue"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  def stateResponse = new JsonSlurper().parseText(response).State.toString() 
  context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="f7c772e8-c844-43fe-a499-d6edfe6ee0cd"><con:settings/><con:config><delay>7000</delay></con:config></con:testStep><con:testStep type="jdbc" name="setProperty" id="b7617377-83da-425d-91e2-1e375963b8c9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
 import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
 context.getTestCase().setPropertyValue ('stateResponse',   state)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="190e8228-11b5-4f38-976e-a5d3b4aa713a"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )

def State =  context.testCase.getPropertyValue( 'stateResponse' )

if (State=='BANKERROR' || State=='PENDING' ) {
	testRunner.gotoStepByName("compareErrorPaymentC2ADBRespFint")
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentDBRespFint" id="aa3968ce-ef78-4214-92d3-f98b80f0e1bd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameBRespFint") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absIdRespFint") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdBRespFint")
compare (state, "expectedStateRespFintSuccess")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateRespFint") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="67a1b459-7945-48f4-a081-defe77d97061"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentC2ADBRespFint" id="226c5bf8-d99b-4c1b-973c-ac35802758e5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA == 'null'
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA == 'null'
	assert documentState == '2'
}</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>actualState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>expectedStateRespFintError</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>expectedStateRespFintSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>114671</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>cfef0a9c-e38e-4adf-a25c-7a878a697b4a</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>PENDING</con:value></con:property></con:properties></con:testCase><con:testCase id="b8e30f83-794f-4f32-9a44-8cb914e398d4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AMinAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="c1c614fc-c6bb-4031-a964-23c7d51487d7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="9ed8bb76-5ca9-4277-9b7f-61281d714201"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7007162b-e4b1-4cbe-a38c-78d7c0b2c55d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == 'BANKNEW'
  </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="46afbcc0-cce5-4d9c-8acf-a41cf9bbbae1" name="SetPropertyValue"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="dc7685db-157e-40bb-875a-7d6eb8679d45"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="jdbc" name="setProperty" id="e53a88e4-4619-4c08-8084-ad97399e18e8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
 import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
 context.getTestCase().setPropertyValue ('stateResponse',   state)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="c3c24fb1-d222-4e6b-a2df-d235a829c021"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )

def State =  context.testCase.getPropertyValue( 'stateResponse' )

if (State=='BANKERROR' || State=='PENDING' ) {
	testRunner.gotoStepByName("compareErrorPaymentC2ADBRespFint")
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentDBRespFint" id="9a389974-a735-4797-9b18-bf832ff33107"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameBRespFint") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absIdRespFint") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdBRespFint")
compare (state, "expectedStateRespFintSuccess")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateRespFint") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="8376826e-b14d-421d-871c-89d89f6d465d"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentC2ADBRespFint" id="7d3b173d-78ab-4b2b-b86e-a8c1b8f0a8fd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA == 'null'
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA == 'null'
	assert documentState == '2'
}


</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>actualState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>expectedStateRespFintError</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>expectedStateRespFintSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>114672</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>cfef0a9c-e38e-4adf-a25c-7a878a697b4a</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>PENDING</con:value></con:property></con:properties></con:testCase><con:testCase id="5792a7a7-3a14-4fff-838c-e82d53be2fff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AMaxAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="ce0a960f-c58f-482e-bc60-42c61aeed7f8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="715def94-1461-445f-8127-54f738e05e2f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7007162b-e4b1-4cbe-a38c-78d7c0b2c55d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == 'BANKNEW'
  </scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="46afbcc0-cce5-4d9c-8acf-a41cf9bbbae1" name="SetPropertyValue"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 
  

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5a966924-d7c9-4426-8a7b-08c656390034"><con:settings/><con:config><delay>7000</delay></con:config></con:testStep><con:testStep type="jdbc" name="setProperty" id="15ae077d-6e77-4775-9cb6-9f095c12dbd5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
 import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
 context.getTestCase().setPropertyValue ('stateResponse',   state)
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="d991a468-9abe-4205-ae47-c71b5cc65565"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )

def State =  context.testCase.getPropertyValue( 'stateResponse' )

if (State=='BANKERROR' || State=='PENDING' ) {
	testRunner.gotoStepByName("compareErrorPaymentC2ADBRespFint")
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentDBRespFint" id="5ab580df-2e6c-4a6f-a782-160cc56190f8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameBRespFint") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absIdRespFint") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdBRespFint")
compare (state, "expectedStateRespFintSuccess")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateRespFint") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="d0572fa0-825b-4ff1-bd1c-9e007f5e7e2e"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentC2ADBRespFint" id="2c1f971b-8314-4ed6-abc5-e318298e4247"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA == 'null'
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA == 'null'
	assert documentState == '2'
}
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>actualState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>amount</con:name><con:value>149999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>expectedStateRespFintError</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>expectedStateRespFintSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>114673</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>cfef0a9c-e38e-4adf-a25c-7a878a697b4a</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKERROR</con:value></con:property></con:properties></con:testCase><con:testCase id="c6fd6f76-c7b6-46b6-89bb-48f9c5e7bc8d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2ANotOwnCardRecipient" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="188fc1a1-61fb-4649-a1d1-c322010a9609" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="e0523258-e083-4127-bab6-a00a57ee0e79"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7007162b-e4b1-4cbe-a38c-78d7c0b2c55d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
 def parser = new JsonSlurper().parseText(response)
 def recipientCardId = messageExchange.modelItem.testStep.testCase.getPropertyValue("recipientCardId") 

  assert parser.Message.toString() ==  "Проходить оновлення інформації. Повторіть спробу пізніше."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKNEW</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1193</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>7</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>8246cf07-7104-46c6-bfb8-48cbd23308d7</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property></con:properties></con:testCase><con:testCase id="8059d5b2-b650-48b4-9391-fcbfb3c2b7cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AAmountMoreLimit" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Copy of getToken" id="65467bf5-9562-4089-95a5-296ed3f035b5" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="payment_IncomingCard - payment_cardToAccount/create" id="91c1e937-13a3-4ddd-95f9-18bb9dca877c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment_IncomingCard - payment_cardToAccount/create" id="9f8f271e-d056-40e9-8fcb-169237f05237" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": '${#TestCase#amount}',
  "CurrencyCode": "",
  "PaymentType": "INCOMING_CARD",
  "Recipient": {
    "CardId": '${#TestCase#cardid}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}${#Project#forw.port.front}/public/transfer-complete",
    "ErrorUrl": "${#Project#forw.test.host}${#Project#forw.port.front}/public/transfer-error"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/cardToAccount/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="298ed0a7-a1a3-4e4d-8515-5cfb9d3c9fb3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9e6873a0-8988-43c1-abd3-f7a98059f16e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Максимальна сума для цієї операції 1499,99 з урахуванням комісії."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tokenFrame</con:name><con:value>09e90175-c2e4-4f95-86c1-ce035dba7f44</con:value></con:property><con:property><con:name>idPay</con:name><con:value>3201</con:value></con:property><con:property><con:name>amount</con:name><con:value>150000</con:value></con:property><con:property><con:name>cardId</con:name><con:value>11</con:value></con:property><con:property><con:name>acc_b</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>acc_a</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>transactionId</con:name><con:value>7b9806c0-0e3b-4ee9-8c8d-00dcf4182773</con:value></con:property><con:property><con:name>RecipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:testCase id="65470380-d3a6-4c06-8649-2365e049ba9c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AInValidRecipientCard" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="7dadace3-af8a-49ae-bb2e-870998a586a9" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="efc4a236-6b71-440a-a249-f15ccd1cf0ff"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7007162b-e4b1-4cbe-a38c-78d7c0b2c55d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
 def parser = new JsonSlurper().parseText(response)
 def recipientCardId = messageExchange.modelItem.testStep.testCase.getPropertyValue("recipientCardId") 

  assert parser.Message.toString() ==  "Проходить оновлення інформації. Повторіть спробу пізніше."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKNEW</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1193</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>13</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>11</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>8246cf07-7104-46c6-bfb8-48cbd23308d7</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property></con:properties></con:testCase><con:testCase id="a3c992f2-a221-49b8-ad36-cf35770f5515" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="d970783e-7a2a-444d-9c64-51b7cbf174d6" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuterCard" id="64743b69-d5c3-4c25-bc7d-caafd45401e4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7007162b-e4b1-4cbe-a38c-78d7c0b2c55d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "По обраній картці перекази заборонені."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>1100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKNEW</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1532</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>15</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>UA043804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value/></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>15</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>8df11022-34af-4a0b-a992-18db93a93f74</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property></con:properties></con:testCase><con:testCase id="f25647b3-560d-43be-86ef-5a03a7ea770f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="624b8bfd-b68c-4ea0-84f4-1757eb698422"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>uah</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>31</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>31</con:value></con:property></con:properties></con:testCase><con:testCase id="70f9198b-2b9c-43d1-990b-735afce5ce47" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="fac84ce5-98d3-48e1-8d97-1309b1b6b29e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>uah</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>30</con:value></con:property></con:properties></con:testCase><con:testCase id="5730563d-4b35-46a1-a6f4-4da0a2ed0ab6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="b758e602-f2db-43ee-ac67-891aa08071c4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>uah</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>35</con:value></con:property></con:properties></con:testCase><con:testCase id="53e73d3e-8449-4c6c-b590-2ae4a05fe23c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="aba06b32-d28d-4470-a1db-711c757f9f0b"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>uah</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>36</con:value></con:property></con:properties></con:testCase><con:testCase id="bd8bf8c8-3c4f-4c6a-87b6-91518fab8fce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayFrameP2PC2AFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="43a92fce-0ec7-4ad4-82b6-809a8f55dd7a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/create" methodName="Payment_IncomingCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType":   "${#TestCase#paymentType}",
  "Recipient": {
    "CardId": '${#TestCase#recipientCardID}'
  },
  "Callback": {
    "CompleteUrl": "${#Project#forw.test.host}/assets/static-pages/success.html",
    "ErrorUrl": "${#Project#forw.test.host}/assets/static-pages/error.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>uah</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>По обраній картці перекази заборонені.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>37</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="be43336e-618a-473d-8413-090f83a1a1b2" name="PaymentsTokenР2РCardToAccount"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="1dc885df-a355-4756-b8f1-24a03d82ef5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AMinAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="0942e04b-a960-4916-9c69-d3efc27b87ce"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="DelayForConfCode" id="2c65283f-6ac5-46d7-9456-6e6ff0ab72e5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="826087e3-c492-40c3-a729-aa54f2b85907"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="bbddc2ba-900c-4ad0-a9a2-0c146056e709"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="723afb1b-89cc-498a-9129-1f47675f181c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="35cc28e2-ddbe-493c-9ec7-6147c3e759ed"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":  '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":  '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  },
  "ConfirmationCode":  "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4ba607d7-462e-4e9a-bbb9-f1bca7c007fd" name="setPropertyValue"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="648b50ca-d03f-49de-8298-12e14659bd5d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == 'BANKSENT'
  </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="39f8b063-2353-437f-ae50-13dd9b8faf0d"><con:settings/><con:config><delay>8000</delay></con:config></con:testStep><con:testStep type="jdbc" name="setProperty" id="83e57374-980e-48d2-9fdf-e4c8ea9703ff"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
 import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
 context.getTestCase().setPropertyValue ('stateResponse',   state)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="b0e93951-8f5d-4e8f-a97c-cb7f35461ad7"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )

def State =  context.testCase.getPropertyValue( 'stateResponse' )

if (State=='BANKERROR' || State=='PENDING' ) {
	testRunner.gotoStepByName("compareErrorPaymentC2ADBRespFint")
}</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentDBRespFint" id="bbf70936-d5c7-4c07-a363-65d86cab826b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
//compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameBRespFint") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absIdRespFint") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdBRespFint")
compare (state, "expectedStateRespFintSuccess")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateRespFint") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="177df68b-3915-496d-9646-e657ea216e79"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentC2ADBRespFint" id="28071c04-62d2-478f-b7f6-433d16eb9d9b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA == 'null'
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA == 'null'
	assert documentState == '2'
}</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>expectedStateRespFintSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207729</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>353823</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>actualState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>expectedStateRespFintError</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKPAYED</con:value></con:property></con:properties></con:testCase><con:testCase id="50864100-f223-4f31-876a-7afed10118d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AMaxAmount" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="8f17ff08-a553-4b14-9d75-1389a155db77" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Copy of DelayForConfCode" id="b522f85a-8cfc-4dfa-b46a-474a7390ac39"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="94637f47-84f9-4214-8de2-6720eff4423a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="1c5de48f-9ff5-4935-8e76-6bfa5287705e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="4fe558ee-5ae5-4b12-813d-470aad4c035a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":  '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":  '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  },
  "ConfirmationCode":  "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4ba607d7-462e-4e9a-bbb9-f1bca7c007fd" name="setPropertyValue"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="648b50ca-d03f-49de-8298-12e14659bd5d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == 'BANKSENT'
  </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="85e4c3ed-a8b9-4da7-8bfb-00458a17ce84"><con:settings/><con:config><delay>8000</delay></con:config></con:testStep><con:testStep type="jdbc" name="setProperty" id="ef9e2bc6-e4fe-4cc2-8fec-2ac2158d1c79"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
 import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
 context.getTestCase().setPropertyValue ('stateResponse',   state)</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Goto" id="d6bdbf0a-0d3b-4df5-9a20-2debe4b96046"><con:settings/><con:config><script>import static com.jayway.jsonpath.JsonPath.parse
 import groovy.json.JsonSlurper

//def response = context.expand( '${#Pay_ValidToVisaToken_A2C#creaePaymentOuterCardt}' )

def State =  context.testCase.getPropertyValue( 'stateResponse' )

if (State=='BANKERROR' || State=='PENDING' ) {
	testRunner.gotoStepByName("compareErrorPaymentC2ADBRespFint")
}</script></con:config></con:testStep><con:testStep type="jdbc" name="compareSuccessPaymentDBRespFint" id="e47abb0e-8efc-494f-a906-09383edd22d4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter ){
	expect = context.testCase.getPropertyValue( parameter )
	if(expect == "propProject"){
		expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
		assert actual == expect   : "ERROR/ propProject / compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
	else if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay")
compare (userId, "userId")
compare (documentType, "documentType")
//compare (accA, "senderAccountNumber")
compare (mfoA, "mfoA")
compare (transactionIdA, "transactionIdA") 
compare (accountTypeA, "SenderAccountType")
compare (accB, "accB")
compare (mfoB, "mfoB")
compare (innB, "innB") 
compare (fullNameB, "fullNameBRespFint") 
compare (transactionIdB, "transactionIdB") 
compare (accountTypeB, "accountTypeB")
compare (amount, "amount")
compare (currencyCode, "currencyCode")
compare (authorizationIdA, "authorizationIdA") 
compare (absId,  "absIdRespFint") 
compare (documentState, "documentState")
compare (paymentPurpose, "paymentPurpose")
compare (authorizationIdB, "authorizationIdBRespFint")
compare (state, "expectedStateRespFintSuccess")
compare (transactionDate, "transactionDate")
compare (absDate, "absDateRespFint") 
compare (errorMessage, "errorMessage")
compare (paymentType, "paymentType")
compare (dealId, "dealId")
compare (documentNumber, "documentNumber")
compare (feeAmount, "feeAmount")
compare (dopInfo, "dopInfo")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="cancelTestCase" id="eb8060a6-aa20-4677-9b89-bd8d5fd01813"><con:settings/><con:config><script>testRunner.cancel( "Test case Done" )</script></con:config></con:testStep><con:testStep type="jdbc" name="compareErrorPaymentC2ADBRespFint" id="5092ddcb-2798-4315-be7c-6142fdadc47c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

state = responseXmlHolder.getNodeValue("//*:STATE") 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE")
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE") 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT") 
acc_b  = responseXmlHolder.getNodeValue("//*:ACC_B") 
acc_a  = responseXmlHolder.getNodeValue("//*:ACC_A") 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE") 
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE") 
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A") 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B") 
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID") 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT") 
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString() 
absIdExpect =  context.getTestCase().getPropertyValue( "absIdExpect" ) 
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString() 
absDateExpect =  context.getTestCase().getPropertyValue( "absDateExpect" )
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString() 
transactionIdAExpect =  context.getTestCase().getPropertyValue( "transactionIdAExpect" )  
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString() 
transactionIdBExpect =  context.getTestCase().getPropertyValue( "transactionIdBExpect" ) 
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdAExpect =  context.getTestCase().getPropertyValue( "authorizationIdAExpect" ) 
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString() 
innBExpect =  context.getTestCase().getPropertyValue( "innBExpect" ) 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
def stateResponse = context.testCase.getPropertyValue( 'stateResponse' ) 

if (stateResponse=='BANKERROR' ) {
	assert  state == 'BANKERROR'
	assert errorMessage.notIn([ 'null','0'] ) 
	assert authorizationIdA == 'null'
	assert documentState == '5'
}
else {
	assert  state == 'PENDING'
	assert errorMessage == 'null'
	assert authorizationIdA == 'null'
	assert documentState == '2'
}</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>149999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>expectedStateRespFint</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207730</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>119484</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>actualState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>expectedStateRespFintSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>stateResponse</con:name><con:value>BANKPAYED</con:value></con:property></con:properties></con:testCase><con:testCase id="acc93c83-7de4-44dd-8589-f95711ef48dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2ANotOwnCardRecipient" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="1e262c1c-0d82-43bc-9630-dfc6681274dc" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="65633635-b409-4372-8781-6b5b3b1b2084"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c37bbd8-93e7-4d24-8dd8-8912006147e8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
 def parser = new JsonSlurper().parseText(response)
 def recipientCardId = messageExchange.modelItem.testStep.testCase.getPropertyValue("recipientCardId") 

  assert parser.Message.toString() ==  "Information is being updated.Try again later."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>149999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1413</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>7</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property><con:property><con:name>otp</con:name><con:value>002982</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>expectedStateRespFint</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>Тестовий користувач</con:value></con:property></con:properties></con:testCase><con:testCase id="251a3566-e72f-4d9d-90a0-98cd05d67827" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2ANotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="c158f1c4-206e-461d-ab34-e37503518a8c" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="a59cf5b8-1a06-460e-b654-3403015e9858"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3d49821d-1de0-4e9d-8047-d1d6d1c4f337" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
 def parser = new JsonSlurper().parseText(response)
 def senderCardId = messageExchange.modelItem.testStep.testCase.getPropertyValue("senderCardId") 

  assert parser.Message.toString() ==  "You have not any cards."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>149999</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1413</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>21</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property><con:property><con:name>otp</con:name><con:value>002982</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>expectedStateRespFint</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>Тестовий користувач</con:value></con:property></con:properties></con:testCase><con:testCase id="56c71f55-5aa8-4141-8af8-c2b46c231be9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AAmountMoreLimit" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="649b8868-fd0b-470a-bdb9-be7932cbc3b2" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="c628c377-5434-4875-af96-7967e232918e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d638740-92d7-436d-89e1-d389efaf9bac" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Transfer limit for this type of operation, incliuding fee, 1499.99 is exceeded."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>150000</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>fee</con:name><con:value>1100</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1413</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property><con:property><con:name>otp</con:name><con:value>002982</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>expectedStateRespFint</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>Тестовий користувач</con:value></con:property></con:properties></con:testCase><con:testCase id="72320280-fbe4-466f-a22d-1a43e4df9250" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AToBlockAcc" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="28fbe951-b65a-4d11-bbbf-8f58a700e869" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="471b898c-9f7d-4136-87b6-84382431d2c5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8afd1966-9e7f-4b78-bb58-6bd7ec9cd105" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>idPay</con:name><con:value>1414</con:value></con:property><con:property><con:name>idPayment</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>15</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>UA043804180000026206800305336</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property><con:property><con:name>otp</con:name><con:value>657002</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>expectedStateRespFint</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>Тестовий користувач</con:value></con:property></con:properties></con:testCase><con:testCase id="5e8fa6c4-cd63-48ea-adc9-7f61cdaffe9f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="getToken" id="dab309e5-af42-4c81-8426-85f6821f1ece" disabled="true"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="processPaymentOuteCard" id="1b4d70a1-b371-47fe-8439-e24652866811"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuteCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}
</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b11f60f-1e0a-4a74-8527-fb1ec58159fd" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createPaymentOuterCard" id="ba1a469c-b04e-4a33-b846-74d2806930a0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/create" methodName="Payment_OuterCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createPaymentOuterCard" id="6283cf56-a5f5-411d-aa83-0be28ad9f2a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":  '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":  '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  },
  "ConfirmationCode":  "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/external/process</con:originalUri><con:assertion type="GroovyScriptAssertion" id="648b50ca-d03f-49de-8298-12e14659bd5d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="b9ed1217-c6f3-40f6-b9af-86c33f0e5eab" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="b9bb6b7f-ff80-400e-b201-24124dc34829"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDate</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absId</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>accB</con:name><con:value>UA953804180000026208800100948</con:value></con:property><con:property><con:name>accountTypeB</con:name><con:value>CARD</con:value></con:property><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdB</con:name><con:value>null</con:value></con:property><con:property><con:name>authorizationIdBRespFint</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>expectedStateRespFintSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>feeAmount</con:name><con:value>0</con:value></con:property><con:property><con:name>fullNameB</con:name><con:value>AutoL AutuF Tests</con:value></con:property><con:property><con:name>fullNameBRespFint</con:name><con:value>Тестовий користувач</con:value></con:property><con:property><con:name>idPay</con:name><con:value>2453</con:value></con:property><con:property><con:name>innB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>mfoA</con:name><con:value>380418</con:value></con:property><con:property><con:name>mfoB</con:name><con:value>380418</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property><con:property><con:name>paymentPurpose</con:name><con:value>Переказ грошових коштів.</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>recipientCardId</con:name><con:value>10</con:value></con:property><con:property><con:name>recipientCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29242005400020</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>tokenFrame</con:name><con:value>0d59459e-c09f-488f-a7b2-c08e617bdc52</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>userId</con:name><con:value>propProject</con:value></con:property><con:property><con:name>actualState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>expectedStateRespFintError</con:name><con:value>BANKERROR</con:value></con:property></con:properties></con:testCase><con:testCase id="1ad66279-e3e6-4375-85d9-f41ad04ac4ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AFromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="589e2264-203f-40d9-a49b-8e861dbc5df7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>31</con:value></con:property></con:properties></con:testCase><con:testCase id="fccb1632-7986-45d6-b0e2-83d932e78f99" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AFromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="33115781-788e-42b8-89aa-b9cafb98e6ff"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>30</con:value></con:property></con:properties></con:testCase><con:testCase id="dfb623c4-3624-4c58-b40b-d68d70eeee4b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AFromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="7f2a1e28-7a4c-4203-a83a-c7741590471a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>35</con:value></con:property></con:properties></con:testCase><con:testCase id="64c97daf-7ed5-4d81-a704-51ba77fed247" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AFromClosedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="61d9149b-d5bd-42a6-8443-046b228e2c32"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>26200800187420</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>36</con:value></con:property></con:properties></con:testCase><con:testCase id="025f2713-9570-4b63-8d08-05abed33d3e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PayTokenP2PC2AFromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="processPaymentOuterCard" id="69a0e409-1886-4e71-a6e6-18ea672bf2d6"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/payments/cardToAccount/external/process" methodName="INCOMING_CARD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="processPaymentOuterCard" id="76a660f2-2d4d-42e2-9e9f-e2e56a71de24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "ExternalCardId":   '${#TestCase#senderCardId}'
  },
  "Recipient": {
    "CardId":   '${#TestCase#recipientCardID}'
  },
  "Amount":  ${#TestCase#amount},
  "CurrencyCode": "",
  "PaymentType": "${#TestCase#paymentType}",
  "Callback": {
    "CompleteUrl": "http://10.10.17.152/assets/static-pages/error.html",
    "ErrorUrl": "http://10.10.17.152/assets/static-pages/success.html"
  }
}</con:request><con:originalUri>http://10.10.17.160/api/v1/payments/accountToCard/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="54396778-47e6-479e-9893-6a8311d12070" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="126a5b4e-10f4-4354-b3d7-4a1d2490d3c6" name="Script Assertion"><con:configuration><scriptText>  import groovy.json.JsonSlurper
  def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 
  assert message == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Cache-Control" value="no-cache"/>
  <con:entry key="Accept-Language" value="uk"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Accept-Language</con:entry><con:entry>Accept</con:entry><con:entry>Cache-Control</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_CARD</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>4111111111111101</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>senderCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>No transfers are allowed on the selected card.</con:value></con:property><con:property><con:name>recipientCardID</con:name><con:value>37</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="352e35d6-d2ce-442b-a846-9a6e61e3f993" name="RefundDepositOwnAcc"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9556e3e8-e0f7-40db-b74d-558b87eeec0f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccMinReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="be1e6c59-1731-4c03-b9c5-7e9930d742ca"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="fa6d0c3c-a71a-4382-8a81-65349d14a401"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="491fbcc0-a618-4570-8bfd-6b671291973c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/process" id="52780822-f401-4933-83d3-69590245384f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="9c3c69d0-ed7b-4a9e-b6e7-5da16df8f608"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/create" id="ad876ffb-2152-461b-b6d0-a996d1dfa6de"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getTestSuite().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRepfundDB" id="8fe8c350-1605-47ab-830b-e23670cf2437"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite") 
compare (absId, "absIdExpect", "testSuite") 
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (documentNumber, "documentNumber", "testSuite")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1000</con:value></con:property><con:property><con:name>fee</con:name><con:value>10</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>077185</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207731</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="a364aefb-eb57-4986-9fb5-f943c72fa794" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccMaxReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="622f4a82-602d-4545-bd7b-ef71d90d56bf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/process" id="1f93ba53-77c2-4dab-90e2-d347a28d5c6a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="b2322fdf-05e9-4f2b-a9b7-4b292e57c8d4"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/create" id="52098fe0-b100-4c69-9015-bbdb388f8667"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getTestSuite().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRepfundDB" id="6e7e093f-c195-4d45-b024-863ac7637b43"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite") 
compare (absId, "absIdExpect", "testSuite") 
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (documentNumber, "documentNumber", "testSuite")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100000</con:value></con:property><con:property><con:name>fee</con:name><con:value>1000</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>924511</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207732</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="47b8e956-1a98-45f4-81ba-2409516e0bee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccFee0" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="a5f9c0d9-6115-4b23-834d-4e30ad3dd3de"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/process" id="89248099-8378-43a9-9b53-ea4ce28d3719"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="23245455-d06e-42cd-bd3e-6c8af1b08486"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/create" id="e0e31a0f-3fbd-4c7d-80c4-7393120eea7f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getTestSuite().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRepfundDB" id="0156f464-65e0-4d3b-ad8a-f151a8f0203e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite") 
compare (absId, "absIdExpect", "testSuite") 
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (documentNumber, "documentNumber", "testSuite")
compare (feeAmount, "feeExpect", "testCase")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>99999</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>579955</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207733</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>feeExpect</con:name><con:value>1000</con:value></con:property></con:properties></con:testCase><con:testCase id="cfd139e3-1590-4b14-a1f6-aabaf8eb9722" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccFeeNull" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="023bc4fa-32af-435c-a8ec-9881456cce7e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/process" id="8864a9e3-b854-43cd-8fed-d8efa9847499"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="75bfc99e-a367-4490-bb02-c738c9b68ff8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/create" id="f1fc07a2-36e8-4186-80cc-4316b298840e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getTestSuite().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRepfundDB" id="6d8df89a-06d9-4749-9d22-bb32080e19cf"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite") 
compare (absId, "absIdExpect", "testSuite") 
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (documentNumber, "documentNumber", "testSuite")
compare (feeAmount, "feeExpect", "testCase")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>99999</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>374942</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207734</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>feeExpect</con:name><con:value>1000</con:value></con:property></con:properties></con:testCase><con:testCase id="e5b67485-a9f3-4534-a543-0e36bfb304b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="9407fb67-c626-4bdc-8b86-cced44d96765"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/create" id="ce92a574-0f08-475c-be73-2f57fe6b6b1a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="62c7cf2c-7557-45f9-9e57-fb877fac1b3c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100000</con:value></con:property><con:property><con:name>fee</con:name><con:value>1000</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>153575</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="5fbf2a94-3672-4d2a-b30c-f0b692c40513" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccCurrencyNotMatchDeposit" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="598a436e-4e86-41de-b004-d88793a9f60c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1000</con:value></con:property><con:property><con:name>fee</con:name><con:value>10</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786472</con:value></con:property><con:property><con:name>otp</con:name><con:value>153575</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108214</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>USD</con:value></con:property></con:properties></con:testCase><con:testCase id="5fcb8b37-ae85-46d1-80f3-447a418bbf22" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccNotOwnAccSender" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="5edc6b63-242c-4e59-82be-9344810b0115"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100000</con:value></con:property><con:property><con:name>fee</con:name><con:value>1000</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA033804180000026201105997905</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>153575</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108214</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="56f827b8-b45b-4500-8ef4-e22d596d10df" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccAmountLessAllowable" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="93dfea45-356d-4ffb-b72f-f62976c59e93"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a66e242e-064b-4e26-afcc-8bcad671a2c2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Minimum deposit replenishment amount - 10 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>999</con:value></con:property><con:property><con:name>fee</con:name><con:value>10</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>921343</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108211</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="049e1714-5215-4929-9616-cda8dd85ce9e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccAmountMoreAllowable" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="3e1501c8-e710-4f7e-9013-0c2048f9d329"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="449d64df-5653-4cc6-aa66-41adfeb864c3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Maximum deposit replenishment amount - 1000 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100001</con:value></con:property><con:property><con:name>fee</con:name><con:value>1000</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>153575</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108214</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="088a308f-211c-447f-a04b-e0c60478f07a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="62902bf1-3992-4090-8c84-3aab905bca58"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2a483680-95d0-4992-9a4c-37e87324f79b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>fee</con:name><con:value>1000</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>153575</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108214</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="bbe70137-efe6-45d6-ae1c-3ab399a94d23" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="2733a759-3d25-468b-8a4d-fe953f2c538f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100000</con:value></con:property><con:property><con:name>fee</con:name><con:value>1000</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>153575</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108214</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="81aa1e1b-3590-4316-a86e-b7d36597ebd4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccCanreplenishDeposit0" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="dd6b75bc-b810-481d-a21e-d2dfa6f72640"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3ec1c3f-fe4c-4722-89e5-fed45ca2e089" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "There is no possibility of replenishment for this product."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1000</con:value></con:property><con:property><con:name>fee</con:name><con:value>10</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>2000</con:value></con:property><con:property><con:name>otp</con:name><con:value>512371</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108219</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="6c06551b-1a5e-471d-998f-585cb557601e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccCardMaxReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="dc26083b-230c-48cf-9bfe-272fa01af08a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/process" id="a0ab67a6-679d-49a7-a723-d7be9e35c106"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="976fba12-3a0e-4ad3-90ac-c7f0693b9f15"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/create" id="7b1f408d-c601-4ac7-8fd6-f41054c93bfa"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getTestSuite().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRepfundDB" id="67d722a4-0fd9-47d6-924b-a8456f56c218"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testCase")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testCase") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite") 
compare (absId, "absIdExpect", "testSuite") 
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (documentNumber, "documentNumber", "testSuite")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>612716</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207735</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:testCase id="ca2257f1-67c6-464a-961a-5e42547069fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RefundDepositOwnAccCardSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="710f415c-4d9d-4fb4-af79-03b858893faf"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestCase#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4247a6f6-6230-4ef2-ae2e-be6b854ac5e2" name="Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19803</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786469</con:value></con:property><con:property><con:name>otp</con:name><con:value>981169</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108229</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>null</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>innB</con:name><con:value>7000000000</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>DEPOSIT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA433804180000026350316112646</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property></con:properties></con:testSuite><con:testSuite id="fca2c83b-fe07-4e5e-ba08-bc4b73c29e9f" name="OpenDepositOwnAcc"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="22916c7b-3b06-4650-9706-e721d896c6ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccMinReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="c9955f9e-5028-4624-87e6-3929191fd75a"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="c8194339-8e31-499e-991e-2608a974b6ff"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="aff07d0f-b5da-4bd3-840a-9b5eeeb54b32"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/process" id="a135b57e-64b4-4e7c-a3df-8e0bc0fe468f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="1e6dfda2-a4ce-48b0-b7bb-5db2296a9eea"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/create" id="4be8d2cd-8a72-470d-96c7-7e61926c2dc1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d657651d-2294-4390-a653-ad4c32bf7e28" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c963cdff-a6ed-4ccc-8c8d-ae92af7ab04f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-V_ANALYTIC_DEPOSITS" id="9edd5986-28db-4fbb-a0a1-3c45dda10634"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from V_ANALYTIC_DEPOSITS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "fee", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-DEPOSIT_REQUEST" id="81ed3bab-6eef-49a5-bb61-edf2a22b9348" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from DEPOSIT_REQUEST t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "fee", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2000</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>232023</con:value></con:property><con:property><con:name>idPay</con:name><con:value>10993.0</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="95a5694c-8e2f-4540-9755-afd85ed71ab6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccMaxReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="27e5c598-9d1a-4910-abeb-2ae80734551b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/process" id="4f69d7ac-45b8-4b89-8f0a-bc0c520ac623"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="d51b70e3-4ee9-4784-a784-c00472a86b10"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/create" id="328b4ca9-b51a-4381-afe1-229da7ad119d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d657651d-2294-4390-a653-ad4c32bf7e28" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c963cdff-a6ed-4ccc-8c8d-ae92af7ab04f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-V_ANALYTIC_DEPOSITS" id="4c49ff59-df77-438d-a36d-f1546b145fb6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from V_ANALYTIC_DEPOSITS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "fee", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>37880</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>379</con:value></con:property><con:property><con:name>otp</con:name><con:value>786212</con:value></con:property><con:property><con:name>idPay</con:name><con:value>10986.0</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="25deafc2-db86-4913-93da-9ae8e862c3f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccFee0" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="ef25f94a-32d2-496e-bf08-956e1a843907"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/process" id="5e309fc4-c6b6-4cd1-94a9-a0ef675688bf"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="6f5000b1-23d4-44d7-8dc0-a1c54c02936f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/create" id="8b80324a-c417-4708-b061-9bf8d89858d5"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d657651d-2294-4390-a653-ad4c32bf7e28" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c963cdff-a6ed-4ccc-8c8d-ae92af7ab04f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-V_ANALYTIC_DEPOSITS" id="39600e28-329e-43e9-b724-ccf21a851c63"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from V_ANALYTIC_DEPOSITS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeExpect", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20099</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property><con:property><con:name>otp</con:name><con:value>323927</con:value></con:property><con:property><con:name>idPay</con:name><con:value>10987.0</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>feeExpect</con:name><con:value>201</con:value></con:property></con:properties></con:testCase><con:testCase id="b28066cc-658e-4c4b-9e4b-9a16de700dad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccFeeNull" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="c8900543-ce52-4cd2-b876-d6b92e0bfda4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/process" id="83ee774d-c61c-4002-b263-566e1057b698"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="247aa34d-c7b3-44d3-9d74-18fa3d5470f8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/create" id="93dcce6d-0c2b-4b7a-89d6-f162fca09069"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d657651d-2294-4390-a653-ad4c32bf7e28" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c963cdff-a6ed-4ccc-8c8d-ae92af7ab04f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-V_ANALYTIC_DEPOSITS" id="e3465578-6f1b-43b4-8e3e-791f244072d8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from V_ANALYTIC_DEPOSITS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeExpect", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>37880</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value/></con:property><con:property><con:name>otp</con:name><con:value>683851</con:value></con:property><con:property><con:name>idPay</con:name><con:value>10988.0</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>feeExpect</con:name><con:value>379</con:value></con:property></con:properties></con:testCase><con:testCase id="fb2aad9b-06a1-49e8-acb3-9ee1601b0f73" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccCardMaxReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="61a667d9-0542-4aec-9201-5f9866b46e78"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/process" id="e3846e7a-1e06-444c-b1c2-acd64d06e4ef"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestCase#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="05fe82d2-89cf-4135-8473-9e1eb60a818e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/create" id="c5bdbfe1-ee5d-4bdd-929a-aaf0c241d74f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestCase#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d657651d-2294-4390-a653-ad4c32bf7e28" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c963cdff-a6ed-4ccc-8c8d-ae92af7ab04f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-V_ANALYTIC_DEPOSITS" id="12a89076-86c8-4cdb-9465-98eb65fc3fe0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from V_ANALYTIC_DEPOSITS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "fee", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testCase")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-DEPOSIT_REQUEST" id="2af0c83a-8391-4c3a-a3a1-3663da6e7e82" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from DEPOSIT_REQUEST t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "fee", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>otp</con:name><con:value>702442</con:value></con:property><con:property><con:name>idPay</con:name><con:value>10989.0</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>fromAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property></con:properties></con:testCase><con:testCase id="b79b3de3-fad4-43f6-b78f-d0ad732c22a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccAmountLessAllowable" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="4be8b57d-bf61-4594-8629-7cbbc156042d"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>422
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d8136992-2645-4b69-97cf-b7847bcd30b2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Мінімальна сума депозиту - 20 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1999</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>878566</con:value></con:property><con:property><con:name>idPay</con:name><con:value>848</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="c12bdfd1-1f82-4203-ac2a-96d574fa2426" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccWrongConfCode" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="618e34d1-3bcd-4c4a-a75d-b1c5af73b4a0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/request/create" id="7729070c-2e36-49d3-9bd3-ec33261ae044"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "ConfirmationCode": "${#TestCase#otp}",
  "CurrencyCode":  "${#TestSuite#currencyCodeUah}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d657651d-2294-4390-a653-ad4c32bf7e28" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c963cdff-a6ed-4ccc-8c8d-ae92af7ab04f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="87231df8-f3e9-44d1-b6cd-dc5bdcde227b" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="ef9c5e81-22a1-4e71-a321-dc2bbb38bc09"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2000</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>878566</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="182a8254-e410-44b6-b2d8-de78dd9fdc46" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccFromCurrencyNotMatchDeposit" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="c9cf0ce0-59a5-4742-bee1-557be61c5da0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestCase#depositProductId}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2000</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>122401</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>603970</con:value></con:property><con:property><con:name>idPay</con:name><con:value>861</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="a3d08d62-6238-4756-8511-0c0ab6aefba7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccInterestCurrencyNotMatchDeposit" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="962d6985-7c39-4619-9b01-2ad49ae53a48"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestCase#depositProductId}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestCase#finalAccountNumber}",
   "FromAccountNumber": "${#TestCase#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compare DB-DEPOSIT_REQUEST" id="fed55faa-6d24-4033-b6d8-841aabb4f146" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from DEPOSIT_REQUEST t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
bankClientID = responseXmlHolder.getNodeValue("//*:BANK_CLIENT_ID").toString() 
processingClientID = responseXmlHolder.getNodeValue("//*:PROCESSING_CLIENT_ID").toString() 
requestType = responseXmlHolder.getNodeValue("//*:REQUEST_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
dealStateID  = responseXmlHolder.getNodeValue("//*:DEAL_STATE_ID").toString() 
depositTypeSqnc  = responseXmlHolder.getNodeValue("//*:DEPOSIT_TYPE_SQNC").toString() 
currencyID = responseXmlHolder.getNodeValue("//*:CURRENCY_ID").toString()  
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE").toString()  
incomeType = responseXmlHolder.getNodeValue("//*:INCOME_TYPE").toString()  
fromAccNumber = responseXmlHolder.getNodeValue("//*:FROM_ACCOUNT_NUMBER").toString()  
term = responseXmlHolder.getNodeValue("//*:TERM").toString()  
currentRate  = responseXmlHolder.getNodeValue("//*:CURRENT_RATE").toString()
creationDate = responseXmlHolder.getNodeValue("//*:CREATION_DATE").toString()  
depositAccNumber  = responseXmlHolder.getNodeValue("//*:DEPOSIT_ACC_NUMBER").toString()  


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (bankClientID, "bankClientID", "testProject" )
compare (processingClientID, "processingClientID", "testProject")
compare (requestType, "requestType", "testSuite")
compare (dealId, "dealId", "testProject") 
compare (dealStateID, "expectedStateSuccess", "testSuite")
compare (depositTypeSqnc, "depositTypeSqnc", "testSuite")
compare (currencyID, "currencyID", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "fee", "testCase") 
compare (incomeType, "incomeType", "testSuite") 
compare (fromAccNumber, "fromAccountNumber", "testSuite")
compare (term, "term", "testSuite")
compare (currentRate, "currentRate", "testSuite")
compare (creationDate, "creationDate", "testSuite") 
compare (depositAccNumber, "depositAccNumber", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>5500</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>121320</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>603970</con:value></con:property><con:property><con:name>idPay</con:name><con:value>861</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>fromAccountNumber</con:name><con:value>UA293804180000026205205160401</con:value></con:property><con:property><con:name>finalAccountNumber</con:name><con:value>UA293804180000026205205160401</con:value></con:property><con:property><con:name>percentageAccountNumber</con:name><con:value>UA293804180000026205205160401</con:value></con:property></con:properties></con:testCase><con:testCase id="12f40eda-2d6d-4954-b3bb-09a7ef0d4178" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccFinalCurrencyNotMatchDeposit" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="19e06a6f-baca-49c4-adf7-844d0a9ab4b1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestCase#depositProductId}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestCase#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestCase#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>422</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>5500</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>121320</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>603970</con:value></con:property><con:property><con:name>idPay</con:name><con:value>861</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>fromAccountNumber</con:name><con:value>UA293804180000026205205160401</con:value></con:property><con:property><con:name>finalAccountNumber</con:name><con:value>UA293804180000026205205160401</con:value></con:property><con:property><con:name>percentageAccountNumber</con:name><con:value>UA293804180000026205205160401</con:value></con:property></con:properties></con:testCase><con:testCase id="8ec87697-9109-408b-b122-58a71ad9b1f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="cc05835b-543f-42a6-a7ab-9516fc6d8160"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestSuite#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b83f63ae-052d-4228-a6f4-09714ab007db" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "На вашому рахунку недостатньо коштів для виконання операції."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>495</con:value></con:property><con:property><con:name>otp</con:name><con:value>699810</con:value></con:property><con:property><con:name>idPay</con:name><con:value>852</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property></con:properties></con:testCase><con:testCase id="806ae2d3-b5b5-4b08-80be-6c73d3bec2c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccFromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="4356c05a-d7fa-4254-b295-4b52ec26057f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestCase#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2000</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>122401</con:value></con:property><con:property><con:name>fee</con:name><con:value>20</con:value></con:property><con:property><con:name>otp</con:name><con:value>603970</con:value></con:property><con:property><con:name>idPay</con:name><con:value>861</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>fromAccountNumber</con:name><con:value>UA043804180000026301000089078</con:value></con:property></con:properties></con:testCase><con:testCase id="3526e5b3-b67f-41e6-9fad-77bd3cc5e289" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenDepositOwnAccCardSumMoreAvailableAmount" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/request/process" id="2f973076-6a20-49e8-b03d-6a3089848104"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/request/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/request/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "AutoProlong": "${#TestCase#autoProlong}",
  "DepositProductId":  "${#TestSuite#depositTypeSqnc}",
   "Fee": "${#TestCase#fee}",
   "FinalAccountNumber": "${#TestSuite#finalAccountNumber}",
   "FromAccountNumber": "${#TestCase#fromAccountNumber}",
   "PaymentType": "${#TestSuite#paymentType}",
    "PercentageAccountNumber": "${#TestSuite#percentageAccountNumber}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/request/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e9da4c6-fea2-4b65-8663-2f428c1ecff6" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6434a862-20c3-4141-8fe5-14f728b82b67" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "На вашому рахунку недостатньо коштів для виконання операції."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Accept-Language" value="uk-UA"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept-Language</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20001</con:value></con:property><con:property><con:name>autoProlong</con:name><con:value>true</con:value></con:property><con:property><con:name>depositProductId</con:name><con:value>9</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>otp</con:name><con:value>828839</con:value></con:property><con:property><con:name>idPay</con:name><con:value>860</con:value></con:property><con:property><con:name>currencyID</con:name><con:value>980</con:value></con:property><con:property><con:name>fromAccountNumber</con:name><con:value>UA193804180000026209800317622</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>creationDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currentRate</con:name><con:value>16</con:value></con:property><con:property><con:name>depositAccNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>depositTypeSqnc</con:name><con:value>121312</con:value></con:property><con:property><con:name>expectedStateSuccess</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>finalAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>fromAccountNumber</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>incomeType</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INNER_DEPOSIT</con:value></con:property><con:property><con:name>percentageAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>requestType</con:name><con:value>22</con:value></con:property><con:property><con:name>term</con:name><con:value>515</con:value></con:property><con:property><con:name>currencyCodeUah</con:name><con:value>UAH</con:value></con:property></con:properties></con:testSuite><con:testSuite id="7e770719-e415-4c7f-a467-e272d9b23033" name="RechargePhone"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="eb2126e9-44c4-4638-b1d7-bcb7a8e37bb9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MinAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="b918affa-c187-4258-9e71-dd0cb2d9c898"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="960a94d5-c4bd-4bab-b3f5-da5857e0bb52"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="b3657f5c-df5b-47ce-94bf-62e77b224944"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="eeb6a0d0-201d-4454-a431-44c5f403f07c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="d94ba6ab-4e6b-4a1a-841d-7bc220fc1e0b"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="d21404dc-55cf-491c-94b4-1d28fd9b1bce"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite")
compare (absId, "absIdExpect", "testSuite")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="8a6b2b43-b287-4a66-a37c-0d254e1ea1af" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusId", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBPortmoneDocuments" id="2cc19a99-07aa-41a4-95f0-75dad6af2952"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionPortmone}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdPortmone", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207736</con:value></con:property><con:property><con:name>otp</con:name><con:value>249085</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100000</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1755</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>statusIdPortmone</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="e8b15722-fc7b-4097-90c8-af7c8dffab5e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxAmountFromAcc" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="140fcddd-a6fa-4d01-bb73-3c2af83566cb"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="f9af89ac-2e38-43b6-88aa-06758234d6e5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="c8f27b77-0560-4057-af0c-30f3d532d50c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="c48a5d9e-e1d8-4fb5-87bc-d3fc1703b706"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="aee3d8bc-9ab0-47c2-9bda-f47036542f44"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="fc4db888-84d0-4322-9a5e-e6189bbf9c11"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite")
compare (absId, "absIdExpect", "testSuite")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="45317dff-aaa0-48ff-ab0e-36a848475492" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusId", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBPortmoneDocuments" id="cca5eb92-65c4-4011-a0fc-7d287875e53c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionPortmone}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testSuite")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdPortmone", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>amount</con:name><con:value>49505</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>otp</con:name><con:value>664650</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207737</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100000</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>495</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>statusIdPortmone</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="3688ac79-b069-44c2-b9be-5c4453fa4dc0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxAmountFromCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="beb00316-6e5f-4873-86c1-ac01a22b3042"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="3d6c9dc2-57e8-41d0-97a1-c11a3f10d69d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="627cdedb-385b-49f9-b444-32a29a971244"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="d1248bf0-fbfd-44b0-bace-ff83a0869fdc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="21bfd858-9c75-4d6a-9f64-444dc51fb3d9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSuccess" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="bf0847ac-c42a-47ec-992b-1bc56465cca1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testSuite")
compare (absId, "absIdExpect", "testSuite")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="e77a140d-0240-40fa-9b7f-383b28246040" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusId", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBPortmoneDocuments" id="f7938409-6752-4e19-a1a2-d8fb2cedc90c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionPortmone}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testSuite")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdPortmone", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19802</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207738</con:value></con:property><con:property><con:name>otp</con:name><con:value>992931</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100000</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>statusIdPortmone</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="0ad9f8d6-abf7-4b11-973f-512466e4f850" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SumMoreMaxAvailable" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="83bfca91-e49c-4f0f-a7f6-208e4212bf8a"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="a5ecbc20-469a-45e4-b531-f7c741012abf"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>20000</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="d041c8c4-26db-451d-92ef-08822e1d0171" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AmountMoreAvailableLimit" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="7f8192f0-16be-43fd-a1d2-5e43d9e168e3"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="87116ae7-9c3a-4f14-b6c0-295e072a9944" disabled="true"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "You have exceeded the maximum transaction amount - 14999 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Portmone services/phone-recharge/process" id="f019cdbb-7db5-44ae-8414-d4879a224eeb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Portmone services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "You have exceeded the maximum transaction amount - 499900 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1499901</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110369</con:value></con:property><con:property><con:name>otp</con:name><con:value>103320</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="18b2341a-057f-404b-862e-4aa05acfc607" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SumMoreAvailableAmountFromAcc" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="e66ce8ee-f488-4b52-8dec-38948ed1823e"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="3703b0dc-0680-4b22-9f70-e5ad86315744"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>49506</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="7295fc3e-4c41-4291-be37-271942153b21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SumMoreAvailableAmountFromCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="743eb2fa-ff71-4d2e-92aa-aadba9aa1d47"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="1fdd23f8-b45f-4c58-aea9-e21894f338b8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Your account has insufficient funds to complete the transaction."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19803</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA193804180000026209800317622</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="e3170e14-dca1-40d8-ba5a-be3fddec7f9d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NotOwnCardSender" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="612aca84-cf88-495c-89b7-acaca32bf7e5"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="10325845-91c1-4e36-b61e-fe5135141fca"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account 26209900044828 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>26209900044828</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="febc6e9a-e310-4368-b003-3c629ec87faa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FromBlockAcc" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="84074b77-c07c-4110-9737-8150533b5a26"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="bd104b78-b2ef-48f4-afca-c4e2b661f2b0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Account UA043804180000026301000089078 not found for this user."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA043804180000026301000089078</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="43c3eeb7-c0b6-46bb-8787-e15ae9664f71" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FromOrderedCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="0c3cc334-a5c3-4a7a-8d13-c4eba7462e79"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="4b5df187-9f30-4ab9-8719-5092fd6f9028"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>26202800046558</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="c137f259-087c-4b8e-bb44-a47d7aa8a266" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FromNotActiveCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="e79ffc63-6221-4554-abab-4693c57bcf07"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="fe32f067-9345-4168-b034-6da81a45cc00"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA043804180000026209900063768</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="27bc7207-4707-445a-bd6d-60e5c3639601" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FromExpiredCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="4f6a3441-6b68-43c1-b34f-23861cba522f"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="995f9436-9478-4074-bdfe-4938cf7c1acc"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>26209800235845</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="37a1471c-d211-41a2-86e0-e466715e1072" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FromClosedCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="aaefa9df-8064-4882-8605-8629aa546f6f"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="6344dad1-e2aa-4573-b5cf-7b49c42386a4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="7f867de2-e6f1-4ec9-89f9-fc346958822f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>26200800187420</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="2d9215fc-55a8-4276-8405-f87bc72f1097" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FromUndefinedCard" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="e06f5df2-2f52-4040-889c-60ecac726487"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="96211a62-c91e-4c27-b72a-fac8f42010d7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3b1642d-18b4-4c97-9652-4202759acd4f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "No transfers are allowed on the selected card."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>19800</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>198</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110368</con:value></con:property><con:property><con:name>otp</con:name><con:value>463110</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>26203800006122</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CARD</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="1efc8b7b-175e-493c-bb18-2eb2798c081b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="WrongConfCode" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="9c3eb8ae-c3ff-4bbc-85af-2bf5c4878345"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="5df6f771-e312-4751-99d1-de525245f8d3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="3ab2c1a8-32ad-4348-ab0d-162cc2939d85"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
   assert parser.Message.toString() ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="ad78d867-8ce0-4e25-87ee-3e8915162ca8" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="2d580a30-8507-4cc1-8170-02079b7d68bd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>110305</con:value></con:property><con:property><con:name>otp</con:name><con:value>931150</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0933333333</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>10</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="783390b6-6de2-4735-832a-ac250c604d6d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateTrueCreateError" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="f80e7b61-1b9f-4436-8e3e-ae649ba9604e"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="2583d5df-8fb5-4a7f-a4d0-cd4e668dc951"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="30caf5de-73f9-4fff-84ab-a2cc9ed96fd7"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="73538426-5b60-49f7-a2cb-610c4ee8d01e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="16935750-d627-41f1-aa69-ef3f57610f22"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ca42109-b600-421f-8a81-418c648b9feb" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="802dfa5b-a662-47db-9706-e702cb479e07" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testCase")
compare (absId, "absIdExpect", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="f90c338a-6d25-4e51-a88d-d0af69fea918" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusId", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>statusId</con:name><con:value>24</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0639420243</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>otp</con:name><con:value>155566</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>fee</con:name><con:value>100</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>documentState</con:name><con:value>5</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>amount</con:name><con:value>10001</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="27ca185e-f2c4-416f-b275-cd8e2872a678" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateTrueCreateRepeateSuccess" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="log.info" id="89647427-8354-4c3f-a77b-c78a586f15f5"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="47b8af16-b4a1-4ebd-9411-d8b8180a4d50"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="4887d29d-01a5-4a3e-b806-ecc7d5b8a6ba"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="5fe527c0-a0ec-4bed-8703-4a3e954ea3ce"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSent" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="ffd53338-4fc4-455b-9b9b-b771cb40db9a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (state, "statePending", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testCase")
compare (absId, "absIdExpect", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="49a5f9f5-7d0d-4704-afae-d880d11bdd8a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusId", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="familnyi/api/v1/payments/sync" id="8cff9705-578e-430e-ba57-b0eddb3e4fd0"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/familnyi/api/v1/payments/sync" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="familnyi/api/v1/payments/sync" id="43efdd44-6124-4477-8570-92148b8c928a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#familniyHost}</con:endpoint><con:request/><con:originalUri>http://10.10.17.158/familnyi/api/v1/payments/sync</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePaymentsSuccess" id="49a240da-420a-4452-9593-9e7e5312ef82"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (state, "stateBankPayed", "testCase")
compare (paymentPurpose, "purposePayed", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpectPayed", "testCase")
compare (absId, "absIdExpectPayed", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocumentsSuccess" id="24f4c2ea-4f04-480b-af84-6c5ff2d9df08"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdSuccess", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>amount</con:name><con:value>10001</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>100</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>203448</con:value></con:property><con:property><con:name>otp</con:name><con:value>090740</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0639420230</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusId</con:name><con:value>23</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>purposePayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>statePending</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>stateBankPayed</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>statusIdSuccess</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="5281c717-a5ad-4216-91c2-05a57289a55e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateTrueCreateRepeateError" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="log.info" id="fd5a4697-7e28-473f-986e-a0b0a1a23deb"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="ad7c9232-821c-4f3a-bff8-db338f8eedb8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="bb935e11-e533-4b69-b586-16627c8e7588"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="3523b7cb-4dda-48b9-9a26-e93866cf7062"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSent" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="5a4e7a5e-929e-4048-8c5d-631adf2a853b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (state, "statePending", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testCase")
compare (absId, "absIdExpect", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="453c0cda-c2a1-48ef-ad0e-b3cff43b3a8a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusId", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="familnyi/api/v1/payments/sync" id="41ce25e3-dfd9-41ab-ab76-0e301bf8e4cf"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/familnyi/api/v1/payments/sync" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="familnyi/api/v1/payments/sync" id="43efdd44-6124-4477-8570-92148b8c928a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#familniyHost}</con:endpoint><con:request/><con:originalUri>http://10.10.17.158/familnyi/api/v1/payments/sync</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePaymentsSuccess" id="b2464a22-709f-4a4a-bc3e-453299f604ce"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (state, "stateBankPayed", "testCase")
compare (paymentPurpose, "purposePayed", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpectPayed", "testCase")
compare (absId, "absIdExpectPayed", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocumentsSuccess" id="f0168d6e-b0b0-4cfa-bb51-91fdba5f1374"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdSuccess", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateExpectPayed</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdExpectPayed</con:name><con:value>null</con:value></con:property><con:property><con:name>amount</con:name><con:value>10001</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>fee</con:name><con:value>100</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>203449</con:value></con:property><con:property><con:name>otp</con:name><con:value>996100</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>purposePayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0639420232</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>stateBankPayed</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>statePending</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>statusId</con:name><con:value>23</con:value></con:property><con:property><con:name>statusIdSuccess</con:name><con:value>2</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="37c401cd-dbdd-40b7-82d4-de11ec82970d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateTrueCreateStatusSuccess" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="log.info" id="d4187652-04ec-441f-861b-8f5ae1480278"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="cf6306e2-5454-4418-9dc8-da26156caf56"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="63078dbe-b987-4187-b5de-03cde986b2c1"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="0fb0b55b-48f7-454b-9e14-abd423abcbd6"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSent" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="bd3b47de-ddce-4918-aab4-af8e8c2f9087"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (state, "statePending", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testCase")
compare (absId, "absIdExpect", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="5339965a-2324-4094-952a-63235c0098de"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select t.*, s.status_code from DOCUMENTS t inner join  SERVICE_STATUS s on t.status_id= s.status_id where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusCode  = responseXmlHolder.getNodeValue("//*:STATUS_CODE").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusCode, "statusCode", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="familnyi/api/v1/payments/sync" id="9daa5d04-df89-402e-9678-73aefe687d1a"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/familnyi/api/v1/payments/sync" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="familnyi/api/v1/payments/sync" id="43efdd44-6124-4477-8570-92148b8c928a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#familniyHost}</con:endpoint><con:request/><con:originalUri>http://10.10.17.158/familnyi/api/v1/payments/sync</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePaymentsSuccess" id="c88e0e66-c70d-41a5-b000-9bb49ed951e3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (state, "stateBankPayed", "testCase")
compare (paymentPurpose, "purposePayed", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpectPayed", "testCase")
compare (absId, "absIdExpectPayed", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocumentsSuccess" id="8c9d9f02-fe45-4266-82e6-c60b47490232"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdSuccess", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>amount</con:name><con:value>100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>203450</con:value></con:property><con:property><con:name>otp</con:name><con:value>544684</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0639770230</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusCode</con:name><con:value>REPEAT</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>purposePayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>statePending</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>stateBankPayed</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>statusIdSuccess</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="a82b724f-1cc5-48d9-9256-7e51e231b193" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateTrueCreateStatusError" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="log.info" id="2023ca87-1175-42d6-8b46-f4ea0586612e"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="e6e18b1b-c4b7-4004-aebe-646170505854"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="4350d932-ee53-4319-ace7-bc295e0f3156"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="49fa620d-b4e3-453b-bb58-9dee3dcf0f01"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c48395b5-d72d-4c27-89ee-06670099bf77" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)

    assert state ==  context.testCase.testSuite.getPropertyValue( "expectedStateSent" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePayments" id="1b39ed8d-218f-4648-8ae5-ee16d9822ad9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentState", "testCase")
compare (state, "statePending", "testCase")
compare (paymentPurpose, "purpose", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testCase")
compare (absId, "absIdExpect", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocuments" id="59989ec7-accf-4955-93c7-dc297e5924d0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select t.*, s.status_code from DOCUMENTS t inner join  SERVICE_STATUS s on t.status_id= s.status_id where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusCode  = responseXmlHolder.getNodeValue("//*:STATUS_CODE").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusCode, "statusCode", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="familnyi/api/v1/payments/sync" id="237194e2-c60a-49bd-b679-2e24d3afc8f9"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/familnyi/api/v1/payments/sync" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="familnyi/api/v1/payments/sync" id="43efdd44-6124-4477-8570-92148b8c928a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#familniyHost}</con:endpoint><con:request/><con:originalUri>http://10.10.17.158/familnyi/api/v1/payments/sync</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Content-Type" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="DBBonePaymentsSuccess" id="a0cae5be-1f09-428c-8e91-417f97da47b9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite")
compare (accA, "senderAcc", "testCase")
compare (mfoA, "senderMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite")
compare (accountTypeA, "senderAccType", "testCase")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccType", "testCase")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testCase")
compare (authorizationIdA, "authorizationIdA", "testCase")
compare (documentState, "documentStateError", "testCase")
compare (state, "stateBankError", "testCase")
compare (paymentPurpose, "purposePayed", "testCase")
compare (transactionDate, "transactionDate", "testSuite")
compare (absDate, "absDateExpect", "testCase")
compare (absId, "absIdExpect", "testCase")
compare (errorMessage, "errorMessage", "testCase")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "dealId", "testCase")
compare (documentNumber, "documentNumber", "testCase")
compare (feeAmount, "fee", "testCase")
compare (dopInfo, "dopInfo", "testCase")

</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="DBFamilniyDocumentsSuccess" id="258b7720-8ae7-4bb7-a922-96f6ac345c3a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnectionFamilniy}</con:connectionString><con:query>select * from DOCUMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
serviceId = responseXmlHolder.getNodeValue("//*:SERVICE_ID").toString() 
subServiceId = responseXmlHolder.getNodeValue("//*:SUB_SERVICE_ID").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
statusId  = responseXmlHolder.getNodeValue("//*:STATUS_ID").toString() 
clientId  = responseXmlHolder.getNodeValue("//*:CLIENT_ID").toString()
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
msgText  = responseXmlHolder.getNodeValue("//*:MSG_TEXT").toString() 
transactionId  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID").toString()
createDate= responseXmlHolder.getNodeValue("//*:CREATE_DATE").toString() 
draftId  = responseXmlHolder.getNodeValue("//*:DRAFT_ID").toString() 


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	} else {
		assert actual == expect   : "ERROR compare/ Actual:  " +  actual + " /Expect: " + expect + " /ParameterName: " + parameter + "/Location: " + location
	}
}

compare (idPayment, "idPay", "testCase")
compare (serviceId, "serviceId", "testCase")
compare (subServiceId, "subServiceId", "testCase")
compare (amount, "amount", "testCase")
compare (feeAmount, "feeFamilniy", "testCase")
compare (statusId, "statusIdSuccess", "testCase")
compare (clientId, "recipientPhoneNumber", "testCase")
compare (userId, "userId", "testProject")
compare (msgText, "msgText", "testSuite")
compare (transactionId, "transactionIdA", "testSuite")
compare (createDate, "transactionDate", "testSuite") 
compare (draftId, "draftId", "testSuite")
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>amount</con:name><con:value>100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>203451</con:value></con:property><con:property><con:name>otp</con:name><con:value>574222</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0639420233</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>statusCode</con:name><con:value>REPEAT</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>purposePayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absDateExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>statePending</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>stateBankPayed</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>statusIdSuccess</con:name><con:value>3</con:value></con:property><con:property><con:name>documentStateError</con:name><con:value>5</con:value></con:property><con:property><con:name>stateBankError</con:name><con:value>BANKERROR</con:value></con:property></con:properties></con:testCase><con:testCase id="d190a0fa-85b0-429b-a322-2759e35af8ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateFalseFamilniy" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="log.info" id="3392be1f-6d6d-4c4f-ba0b-f8dec1503bd3"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/process" id="12cba26f-6dc3-47ea-8d81-386eeb898462"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/process" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
   "Fee": 33,
    "PaymentType": "${#TestSuite#paymentType}",
  "CurrencyCode": "${#TestCase#currencyCode}"
}</con:request><con:originalUri>http://10.10.17.156/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6843f88b-a05e-4ba9-b113-d68077ed278b" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="37c29bba-4078-4ade-94cf-1d0b64e2dca8"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="services/phone-recharge/create" id="6e46fb43-7c28-49ca-80d1-3f42b4d64041"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/services/phone-recharge/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="services/phone-recharge/create" id="67a81cff-5769-4347-ad96-f3d21bb41048" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Sender": {
    "AccountNumber": "${#TestCase#senderAcc}",
    "AccountMFO": "${#TestSuite#senderMFO}",
    "AccountType": "${#TestCase#senderAccType}"
  },
  "Recipient": {
    "PhoneNumber": "${#TestCase#recipientPhoneNumber}"
  },
  "Service": {
    "Id":  "${#TestSuite#serviceId}",
    "SubServiceId": "${#TestSuite#subServiceId}"
  },
  "Amount":  ${#TestCase#amount},
  "Fee": ${#TestCase#fee},
  "CurrencyCode": "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}"
}</con:request><con:originalUri>http://10.10.17.160/api/v1/services/phone-recharge/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b6ca611f-1e2a-42c2-aa91-904648b0b9a1" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>absDateExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absDateExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>null</con:value></con:property><con:property><con:name>absIdExpectPayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>amount</con:name><con:value>100</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>dealId</con:name><con:value>null</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>null</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>fee</con:name><con:value>1</con:value></con:property><con:property><con:name>feeFamilniy</con:name><con:value>0</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>otp</con:name><con:value>466037</con:value></con:property><con:property><con:name>purpose</con:name><con:value>null</con:value></con:property><con:property><con:name>purposePayed</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA453804180000037392003100071</con:value></con:property><con:property><con:name>recipientPhoneNumber</con:name><con:value>0639415243</con:value></con:property><con:property><con:name>senderAcc</con:name><con:value>UA343804180000026209010500575</con:value></con:property><con:property><con:name>senderAccType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1802</con:value></con:property><con:property><con:name>stateBankPayed</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>statePending</con:name><con:value>PENDING</con:value></con:property><con:property><con:name>statusCode</con:name><con:value>REPEAT</con:value></con:property><con:property><con:name>statusIdSuccess</con:name><con:value>0</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>draftId</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedStateError</con:name><con:value>BANKERROR</con:value></con:property><con:property><con:name>expectedStateSuccess</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>innB</con:name><con:value>1000000001</con:value></con:property><con:property><con:name>msgText</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>SERVICE_RECHARGE_PHONE</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>1755</con:value></con:property><con:property><con:name>subServiceId</con:name><con:value>0</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>expectedStateSent</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testSuite><con:testSuite id="38a485fa-330b-445b-aca5-cfe808318117" name="RefundDepositExternal"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="1f1d222d-90e9-4e74-85dc-68af0ad359ed" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MinReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log.info" id="d2c18137-7a79-4d2e-8c64-fe76f32a0b71"><con:settings/><con:config><script>log.info("START TEST SUITE: " + testRunner.testCase.testSuite.name)</script></con:config></con:testStep><con:testStep type="calltestcase" name="getToken" id="e430a232-0d24-4b7a-bb43-1873eabb8c0e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e4844fa5-6554-4afd-a39b-8f0a2401b61c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ae4e36eb-406d-4a73-b7d6-a460e9745a8c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/external/process" id="b74eb6f6-84e2-4713-9177-b8a58130484e"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="ea250522-89c4-4c22-a941-8b3c7f6e5d87"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/external/create" id="bfa0580b-db3e-4ce6-9707-4c1fdc8a0d9c"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRefundDB" id="3c467910-3c57-4322-ac38-d34d31339874"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (feeAmount, "fee", "testSuite")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>499999999990011</con:value></con:property><con:property><con:name>otp</con:name><con:value>180683</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207739</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29244005400017</con:value></con:property></con:properties></con:testCase><con:testCase id="b6fd49e9-a26e-4651-a5cc-d994b5af3c6f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxReplenishAmount" searchProperties="true"><con:settings/><con:testStep type="delay" name="Delay" id="d95d20c2-4981-42e3-a0b3-f3f814ed0ba3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/external/process" id="eb574d15-c163-4a94-a9ea-f3989e4ebf29"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="62b34c09-2a14-4fd4-bcf0-c25a3289c17f"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/external/create" id="bcfbec69-e06d-4682-abc3-89ee0e19dbdd"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRefundDB" id="fe83df98-c67f-49ca-8e5f-696e09b357b0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testSuite")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (feeAmount, "fee", "testSuite")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>195000</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>otp</con:name><con:value>821472</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207740</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29244005400017</con:value></con:property></con:properties></con:testCase><con:testCase id="1915fc42-769d-4419-a2e9-2ff6d516037a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="WrongConfCode" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/external/process" id="edac3793-2863-4ab3-8823-7dd5b1921344"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/external/create" id="76c3e9ae-45d3-4598-96b0-48516fa23417"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Confirmation code is incorrect."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="updateAuthUsersOtp" id="e93a3866-fbad-4d87-86a2-765e266e10a2"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>update auth_users_otp 
set failed_attempts_count = 0, last_attempt_date = null 
where user_id = '${#Project#userId}'
</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>otp</con:name><con:value>111111</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property></con:properties></con:testCase><con:testCase id="4320da78-3c51-4b80-a950-f8bc7398a302" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AmountMoreAllowable" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="72c9f59a-90ec-4d75-97e2-99ce42e8dd70"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a66e242e-064b-4e26-afcc-8bcad671a2c2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Maximum deposit replenishment amount - 1950 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>195001</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>otp</con:name><con:value>921343</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108211</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:testCase id="e9f8fc08-67ba-46f2-9888-1fbb26395723" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CurrencyNotMatchDeposit" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/external/process" id="e9750a58-d3f1-4f5c-8bee-97b0348a1c61"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestCase#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5cfbb252-97e1-4f59-acdf-21e5fe03cc7b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Select deposits in the national currency."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>USD</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>otp</con:name><con:value>502545</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29244005400017</con:value></con:property></con:properties></con:testCase><con:testCase id="a7bfa653-ed43-41ae-b57a-53e5e61ab98d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NotOwnCard" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/external/process" id="44046b71-8c7a-4995-961e-a5f8590182b3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestCase#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5cfbb252-97e1-4f59-acdf-21e5fe03cc7b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "You have not any cards."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>2</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAG</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>384</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>otp</con:name><con:value>502545</con:value></con:property><con:property><con:name>idPay</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29244005400017</con:value></con:property></con:properties></con:testCase><con:testCase id="0fea925f-49c3-4611-aa09-8b08ddec2220" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AmountLessAllowable" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="6fd49be5-071b-4b34-8732-20ea6b4e4330"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
   "Fee": "${#TestCase#fee}",
  "PaymentType": "${#TestSuite#paymentType}",

  "Sender": {
    "AccountNumber": "${#TestCase#senderAccountNumber}",
    "AccountMFO": "${#TestSuite#senderAccountMFO}",
    "AccountType": "${#TestSuite#senderAccountType}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a66e242e-064b-4e26-afcc-8bcad671a2c2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Minimum deposit replenishment amount - 0.02 UAH."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>1</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786481</con:value></con:property><con:property><con:name>otp</con:name><con:value>921343</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108211</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29244005400017</con:value></con:property></con:properties></con:testCase><con:testCase id="fc5ee8c2-eed8-491c-b852-48913a82e524" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxTransferLimit" searchProperties="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="restrequest" name="deposits/replenishment/process" id="975a46cb-b9a1-445e-bf77-3e4134f239b3"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getConfCode" id="6788f697-83fc-4167-8bc9-165171785c88"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/ConfirmationCode/${#Project#userId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getConfCode" id="4c307ce5-f07f-4992-8108-0e8bcbc1aed8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#url_conf_code}</con:endpoint><con:request/><con:originalUri>http://10.10.17.156/api/ConfirmationCode/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="79627933-9c22-4dc9-844d-22b116deb2ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = messageExchange.response.responseContent
  def parser = new JsonSlurper().parseText(response)
  context.getTestCase().setPropertyValue('otp',  parser.confirmationCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deposits/replenishment/external/create" id="5f4d8000-e12e-4886-a0cb-9bbf89a43fdb"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/external/create" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/20786469/replenishment/create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8509d4b1-f37d-4631-9f06-f295296d7096" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1896566e-c08c-49a0-83ef-1151f05d82e3" name="Set Property"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def formUrl = new JsonSlurper().parseText(response).FormUrl.toString() 
  def idPay = new JsonSlurper().parseText(response).Id.toString() 

    context.getTestCase().setPropertyValue ('idPay',   idPay)</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4cca3456-d395-4d85-b031-3dff7ed895fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def state = new JsonSlurper().parseText(response).State.toString() 

  assert state == context.getTestCase().getPropertyValue( "expectedState" ) </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="compareDepositRefundDB" id="d10502e1-cb57-49c6-a4de-8f2b9af112a2"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>${#Project#dbConnection}</con:connectionString><con:query>select * from PAYMENTS t where t.id = ${#TestCase#idPay}</con:query><con:assertion type="GroovyScriptAssertion" id="c2345356-411a-4259-87a3-302ea2025b86" name="Script Assertion"><con:configuration><scriptText> import com.eviware.soapui.support.XmlHolder  
 import com.eviware.soapui.support.GroovyUtils 
 
responseXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml()) 

idPayment = responseXmlHolder.getNodeValue("//*:ID").toString() 
userId = responseXmlHolder.getNodeValue("//*:USER_ID").toString() 
documentType = responseXmlHolder.getNodeValue("//*:DOCUMENT_TYPE").toString() 
accA  = responseXmlHolder.getNodeValue("//*:ACC_A").toString() 
mfoA  = responseXmlHolder.getNodeValue("//*:MFO_A").toString()
transactionIdA  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_A").toString()
accountTypeA= responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_A").toString() 
accB  = responseXmlHolder.getNodeValue("//*:ACC_B").toString() 
mfoB  = responseXmlHolder.getNodeValue("//*:MFO_B").toString()
innB  = responseXmlHolder.getNodeValue("//*:INN_B").toString()
fullNameB  = responseXmlHolder.getNodeValue("//*:FULL_NAME_B").toString()
transactionIdB  = responseXmlHolder.getNodeValue("//*:TRANSACTION_ID_B").toString()
accountTypeB  = responseXmlHolder.getNodeValue("//*:ACCOUNT_TYPE_B").toString() 
amount  = responseXmlHolder.getNodeValue("//*:AMOUNT").toString()  
currencyCode = responseXmlHolder.getNodeValue("//*:CURRENCY_CODE").toString()  
absId  = responseXmlHolder.getNodeValue("//*:ABS_ID").toString()
documentState  = responseXmlHolder.getNodeValue("//*:DOCUMENT_STATE").toString()  
paymentPurpose  = responseXmlHolder.getNodeValue("//*:PAYMENT_PURPOSE").toString()  
authorizationIdA  = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_A").toString() 
authorizationIdB = responseXmlHolder.getNodeValue("//*:AUTHORIZATION_ID_B").toString() 
state = responseXmlHolder.getNodeValue("//*:STATE").toString()  
transactionDate = responseXmlHolder.getNodeValue("//*:TRANSACTION_DATE").toString()  
absDate  = responseXmlHolder.getNodeValue("//*:ABS_DATE").toString()
errorMessage  = responseXmlHolder.getNodeValue("//*:ERROR_MESSAGE").toString() 
paymentType =   responseXmlHolder.getNodeValue("//*:PAYMENT_TYPE").toString() 
dealId  = responseXmlHolder.getNodeValue("//*:DEAL_ID").toString() 
documentNumber  = responseXmlHolder.getNodeValue("//*:DOCUMENT_NUMBER").toString() 
feeAmount  = responseXmlHolder.getNodeValue("//*:FEE_AMOUNT").toString()  
dopInfo  = responseXmlHolder.getNodeValue("//*:DOP_INFO").toString() 

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)}
///////////////  Compare parameters null or known value
public void compare (String actual,String parameter, String location ){
    if(location == "testCase"){
    	expect = context.testCase.getPropertyValue( parameter )
    } else if (location == "testSuite"){
      expect = context.testCase.testSuite.getPropertyValue( parameter )
    } else if (location == "testProject"){
       expect =  context.testCase.testSuite.project.getPropertyValue( parameter )
    }
	
	if(expect == "NotNull"){
		assert actual.notIn([ 'null','0'] )  : "ERROR compareNotNull / actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	} else {
		assert actual == expect   : "ERROR compare/ actual:  " +  actual + " /expect: " + expect + " /parameterName: " + parameter
	}
}

compare (idPayment, "idPay", "testCase")
compare (userId, "userId", "testProject")
compare (documentType, "documentType", "testSuite" )
compare (accA, "senderAccountNumber", "testCase")
compare (mfoA, "senderAccountMFO", "testSuite")
compare (transactionIdA, "transactionIdA", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accB, "recipientAccountNumber", "testCase")
compare (mfoB, "recipientAccountMFO", "testSuite")
compare (innB, "innB", "testSuite") 
compare (transactionIdB, "transactionIdB", "testSuite") 
compare (accountTypeA, "senderAccountType", "testSuite")
compare (accountTypeB, "recipientAccountType", "testSuite")
compare (amount, "amount", "testCase")
compare (currencyCode, "currencyCode", "testSuite")
compare (authorizationIdA, "authorizationIdA", "testSuite") 
compare (documentState, "documentState", "testSuite")
compare (paymentPurpose, "purpose", "testSuite")
compare (transactionDate, "transactionDate", "testSuite")
compare (errorMessage, "errorMessage", "testSuite")
compare (paymentType, "paymentType", "testSuite")
compare (dealId, "depositsDealId", "testCase")
compare (feeAmount, "fee", "testSuite")
compare (dopInfo, "dopInfo", "testSuite")</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>200000</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786504</con:value></con:property><con:property><con:name>otp</con:name><con:value>509890</con:value></con:property><con:property><con:name>idPay</con:name><con:value>207741</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKSENT</con:value></con:property><con:property><con:name>senderAccountNumber</con:name><con:value>29244005400017</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA543804180000026350331134256</con:value></con:property></con:properties></con:testCase><con:testCase id="c87d72f1-b438-48ce-bc19-e9400c18c00f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OverTransferLimit" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="deposits/replenishment/process" id="aaf804ad-59cc-4904-a5f0-eb9843354993"><con:settings/><con:config service="http://10.10.10.152" resourcePath="/api/v1/deposits/${#TestCase#depositsDealId}/replenishment/external/process" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deposits/replenishment/process" id="a0717686-47fb-4f51-a4a9-d8f919c8cb11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#forw.test.host}</con:endpoint><con:request>{
  "Amount": "${#TestCase#amount}",
  "CurrencyCode":  "${#TestSuite#currencyCode}",
  "PaymentType": "${#TestSuite#paymentType}",
  "ConfirmationCode": "${#TestCase#otp}",

  "Sender": {
    "ExternalCardId": "${#TestCase#senderExternalCardId}",
    "ExternalCardNumber": "${#TestSuite#senderExternalCardNumber}"
  }
}</con:request><con:originalUri>http://10.10.17.156/api/v1/deposits/243/replenishment/process</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="868ef9f7-aa1a-4884-865c-f1d658126177" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a66e242e-064b-4e26-afcc-8bcad671a2c2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
  def message = new JsonSlurper().parseText(response).Message.toString() 

  assert message ==  "Transfer limit for this type of operation, incliuding fee, 2000 is exceeded."</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#token}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>amount</con:name><con:value>200001</con:value></con:property><con:property><con:name>depositsDealId</con:name><con:value>20786504</con:value></con:property><con:property><con:name>otp</con:name><con:value>921343</con:value></con:property><con:property><con:name>idPay</con:name><con:value>108211</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>senderExternalCardId</con:name><con:value>41</con:value></con:property><con:property><con:name>senderExternalCardNumber</con:name><con:value>4999999999990011</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>absDateExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>absIdExpect</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>authorizationIdA</con:name><con:value>null</con:value></con:property><con:property><con:name>currencyCode</con:name><con:value>UAH</con:value></con:property><con:property><con:name>documentNumber</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>documentState</con:name><con:value>2</con:value></con:property><con:property><con:name>documentType</con:name><con:value>9</con:value></con:property><con:property><con:name>dopInfo</con:name><con:value>{"SenderCardNumMask":"499999******0011"}</con:value></con:property><con:property><con:name>errorMessage</con:name><con:value>null</con:value></con:property><con:property><con:name>expectedState</con:name><con:value>BANKPAYED</con:value></con:property><con:property><con:name>innB</con:name><con:value>7000000000</con:value></con:property><con:property><con:name>paymentType</con:name><con:value>INCOMING_DEPOSIT</con:value></con:property><con:property><con:name>purpose</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>recipientAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>recipientAccountNumber</con:name><con:value>UA413804180000026205100890423</con:value></con:property><con:property><con:name>recipientAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>senderAccountMFO</con:name><con:value>380418</con:value></con:property><con:property><con:name>senderAccountType</con:name><con:value>CURRENT</con:value></con:property><con:property><con:name>transactionDate</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdA</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>transactionIdB</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>fee</con:name><con:value>0</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>dbConnection</con:name><con:value>jdbc:oracle:thin:bone/bone@10.10.17.151:1521:OBCL</con:value></con:property><con:property><con:name>dbConnectionIC</con:name><con:value>jdbc:oracle:thin:ic/ic@obmmfod.unity-bars.com:1521/BARSDB01</con:value></con:property><con:property><con:name>environment</con:name><con:value>master</con:value></con:property><con:property><con:name>forw.test.host</con:name><con:value>http://10.10.17.152:8081</con:value></con:property><con:property><con:name>otp</con:name><con:value>031989</con:value></con:property><con:property><con:name>token</con:name><con:value>bearer Eioq8IsjwxBDxW8Tso7t26LhwgHCjHds30VwzeRwT44VC_i7ed20_ackxTeBBvFCB0kUQAuqANX23JVAwjq5xjwwvruC_PzjeHWeCHZcGX5x8csd1HWbEps8gwLUVjT9AT9VGzkTXwPYZOXixNQFnz2IG27FX6mjXIvLGvFLY51UmMCbOJYxCJqiTqEad9u3bYFntFnE6UKNMETUdmyyhRfwf2tImmtB9c3caBl6pKD9Kw439iRoF7mrFpXqQbW-YkGK-ytqdoBcirAGJl9GcmXKGUgprK3WHCrlA4KAD0bjcDdSP4ZdSpFd-iligAmECqGRA6ZEhW_7Tk2NH1XrBxdZ8h9Vm-S_Miw1YQP9V_TnftSGWFdbgxzMR3kZZ65tOjwBdett_WkSYteXc6nSvSik6RcleoTU3Cu-liuZP_lHh0QR27NZpQns-9GJ3pH5BFqAY2lWm9EQfEBLyXr33Q</con:value></con:property><con:property><con:name>url_conf_code</con:name><con:value>http://10.10.17.154:801</con:value></con:property><con:property><con:name>userId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6b27d1aa-f0de-4064-8d43-40596b643ef0</con:value></con:property><con:property><con:name>userName</con:name><con:value>autotests</con:value></con:property><con:property><con:name>userPass</con:name><con:value>qwerty</con:value></con:property><con:property><con:name>bankClientID</con:name><con:value>700700</con:value></con:property><con:property><con:name>processingClientID</con:name><con:value>777</con:value></con:property><con:property><con:name>dealId</con:name><con:value>NotNull</con:value></con:property><con:property><con:name>dbConnectionFamilniy</con:name><con:value>jdbc:oracle:thin:familniy/familniy@10.10.17.151:1521:OBCL</con:value></con:property><con:property><con:name>familniyHost</con:name><con:value>http://10.10.17.154:8088</con:value></con:property><con:property><con:name>dbConnectionPortmone</con:name><con:value>jdbc:oracle:thin:portmone/portmone@10.10.17.151:1521:OBCL</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>